<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自动化测试</title>
      <link href="/2021/11/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/11/02/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h1><h2 id="POM设计理念"><a href="#POM设计理念" class="headerlink" title="POM设计理念"></a>POM设计理念</h2><p>自动化测试，是需要基于完整的一套体系来实现，设计模式是其中之一。设计模式：实现自动化测试框架中，一定会用到数据驱动。结合关键字驱动或者POM来实现设计模式</p><h3 id="HTTP和HTTPS协议的区别？"><a href="#HTTP和HTTPS协议的区别？" class="headerlink" title="HTTP和HTTPS协议的区别？"></a>HTTP和HTTPS协议的区别？</h3><ul><li>http时超文本传输协议，信息是明文传输的，https是具有安全性ssl加密的传输协议。</li><li>http协议和https协议的启动端口也不一样，一个是80一个是443.</li><li>http的连接很简单，是无状态的，https协议是由ssl+http协议构建的可进行加密、身份认证的网络协议，更加安全</li></ul><h3 id="常见的post提交数据的方式有哪些？"><a href="#常见的post提交数据的方式有哪些？" class="headerlink" title="常见的post提交数据的方式有哪些？"></a>常见的post提交数据的方式有哪些？</h3><p>主要有四种方式：四种方式取决于Content_Type这个请求头： </p><blockquote><ul><li>Content_Type:application/x-www-form-urlencoded   特点：数据报文是字典，相当于通过表单的方式提交数据，数据格式：a=1&amp;b=2&amp;3</li><li>Content_Type:multipart/form-data 特点：报文包含有文件上传。</li><li>Content_Type:application/json(text/plain,text/html …)   特点：报文都是字符串类型。</li><li>Content_Type:binary 特点：报文类型是以二进制的方式上传文件。</li></ul></blockquote><h3 id="常见的请求头以及他们的作用是什么？"><a href="#常见的请求头以及他们的作用是什么？" class="headerlink" title="常见的请求头以及他们的作用是什么？"></a>常见的请求头以及他们的作用是什么？</h3><p>Accept:客户端接收的数据格式。</p><p>X-Request-With:异步请求。ajax异步请求。</p><p>User-Agent:发送请求的客户端的类型。</p><p>Content_Type:请求的内容的报文格式。</p><p>Cookie:Cookie信息。</p><h3 id="Get和Post的区别？"><a href="#Get和Post的区别？" class="headerlink" title="Get和Post的区别？"></a>Get和Post的区别？</h3><p>Get和Post都可以向服务器提交数据，并且都会从服务器获取数据。区别在于：</p><ul><li>传送参数方式不同：get通过地址栏的方式传参数，post通过表单报文传参数</li><li>传参的长度不同：个体参数有长度限制，post没有</li><li>一般情况下，get是获取数据，比如查询，post提交数据，比如：增，删，改</li><li>get只发送一个tcp数据报文（包含请求头和data），post发送两个报文（请求头，返回100；data，返回200）</li></ul><h3 id="接口请求中常见的返回状态码？"><a href="#接口请求中常见的返回状态码？" class="headerlink" title="接口请求中常见的返回状态码？"></a>接口请求中常见的返回状态码？</h3><p>1xx 信息提示，服务器收到请求，需要请求者继续执行操作</p><p>2xx OK，请求成功</p><p>3xx 重定向，资源已经重新分配。（发送一个请求时，这个请求多次请求了服务器的多个资源）</p><p>4xx 客户端错误</p><p>5xx 服务器内部错误</p><h3 id="cookie-session-token有什么相同点和不同点？"><a href="#cookie-session-token有什么相同点和不同点？" class="headerlink" title="cookie,session,token有什么相同点和不同点？"></a>cookie,session,token有什么相同点和不同点？</h3><p>相同点：都是用户鉴权并且都是服务器生成的。</p><p>不同点：</p><p>cookie保存在客户端的浏览器上，cookie不安全，可以分析存在在本地的cookie进行cookie欺骗。</p><p>session保存在服务器的内存，默认时间30分钟，比cookie安全，缺点是当登录的用户越多，比较占用服务器资源。session一般生成一个sessionId（名字自定义）sessionId可以通过cookie传输。</p><p>taken存储在服务器的数据库里，通过一个接口或者通过登录获取，然后后续所有的接口都需要传token才可以请求成功。token也可以通过cookie传输。</p><h3 id="请问你们公司是如何做接口测试的？（接口测试流程，方案以及用例设计）"><a href="#请问你们公司是如何做接口测试的？（接口测试流程，方案以及用例设计）" class="headerlink" title="请问你们公司是如何做接口测试的？（接口测试流程，方案以及用例设计）"></a>请问你们公司是如何做接口测试的？（接口测试流程，方案以及用例设计）</h3><ol><li><p>获取接口文档，熟悉单接口以及链路接口（接口业务流程）业务，包括接口地址，鉴权方式，入参，出参，错误码等。</p></li><li><p>编写接口测试用例并且评审</p><p>正例：单接口返回成功场景，链路接口业务流程实现逻辑；</p><p>反例：鉴权异常：空，错误，过期。参数异常：空，异常类型，长度异常。错误码异常。其它异常：接口黑名单，接口调用次数限制，分页（少于0，0，中间页，最大页，超过最大页）。</p></li><li><p>使用接口测试工具或代码执行方式执行接口测试。</p><p>重要考虑以下情况：1）接口关联，接口参数加密，是否动态参数，接口参数是否签名，是否需要带请求头。</p></li><li><p>实现持续集成并输出接口测试报告电子邮件，有BUG提出bug。</p></li></ol><h3 id="没有接口文档，如何做接口测试："><a href="#没有接口文档，如何做接口测试：" class="headerlink" title="没有接口文档，如何做接口测试："></a>没有接口文档，如何做接口测试：</h3><p>方式一：可以使用Fiddler，Charles抓包工具抓取接口数据之后整理成接口文档，如果不清楚的字段，找时间集中找开发验证，然后在进行接口测试。</p><p>方式二：通过Jmeter的代理录制功能，先把接口请求录制下来形成接口文档，然后再逐一的进行接口测试。</p><h3 id="接口测试中，依赖登录状态的接口如何测试？"><a href="#接口测试中，依赖登录状态的接口如何测试？" class="headerlink" title="接口测试中，依赖登录状态的接口如何测试？"></a>接口测试中，依赖登录状态的接口如何测试？</h3><p>依赖登录的接口本质上是每次发送请求的时候需要带上cookie和session才能够发送成功。在请求时需要添加上cookie和session。当然：如果是通过Postman会自动去管理，如果是通过jmeter来测试需要增加cookie管理器组件。如果是通过代码来实现接口测试，那么需要生成session对象，然后通过session对象来发送请求。</p><h3 id="你平常做接口测试过程中发现过哪些bug"><a href="#你平常做接口测试过程中发现过哪些bug" class="headerlink" title="你平常做接口测试过程中发现过哪些bug?"></a>你平常做接口测试过程中发现过哪些bug?</h3><p>常规Bug：接口没有实现，没有按照接口文档返回结果，输入一些异常值（空值，特色字符），接口报错，没有返回合理的错误提示。如：购买商品接口，其中有价格参数，我去测试时把商品的价格改成负数，购买成功。如：测试修改商品信息接口，接口文档要求只有商家和超级管理员才有权限修改，我传入一个普通用户的ID或者是传入其他商家的ID，修改成功。</p><p>接口测试就是为了避免绕过前端验证，直接访问后端接口的BUG</p><h3 id="你在接口测试中是如何校验结果是否正确？"><a href="#你在接口测试中是如何校验结果是否正确？" class="headerlink" title="你在接口测试中是如何校验结果是否正确？"></a>你在接口测试中是如何校验结果是否正确？</h3><p>有两种需要校验：</p><ol><li>状态码校验，验证返回的状态码为200 </li><li>业务校验：错误码为0；当接口响应报文比较短，比较固定的情况下，校验完全一致；当接口响应的报文比较长，比较多的情况下，校验最核心的业务信息；当接口的响应报文为非常复杂的多层级XML或JSON格式，通过Xpath,JsonPath正则表达式的匹配方式获取最关键的业务节点，然后校验；查询数据库校验或者通过其他接口校验。</li></ol><h3 id="如何分析一个Bug是前端还是后端的？"><a href="#如何分析一个Bug是前端还是后端的？" class="headerlink" title="如何分析一个Bug是前端还是后端的？"></a>如何分析一个Bug是前端还是后端的？</h3><p>通过抓包工具抓包，然后查看请求报文，如果请求报文对比接口文档有问题，那么就是前端问题。</p><p>如果请求报文没有问题，那就看返回报文，返回的数据不对，那就是后端开发的问题。</p><h3 id="依赖于第三方数据的接口如何进行测试？"><a href="#依赖于第三方数据的接口如何进行测试？" class="headerlink" title="依赖于第三方数据的接口如何进行测试？"></a>依赖于第三方数据的接口如何进行测试？</h3><p>接口关联是项目中的接口依赖于本项目的接口。可以通过Postman搭建Mock服务，但是Postman的mock服务有访问次数限制，一天只能访问1000次，也可以通过Seevlet,Flask等技术来实现接口Mock服务。</p><h3 id="对于加密接口，签名接口如何进行测试？"><a href="#对于加密接口，签名接口如何进行测试？" class="headerlink" title="对于加密接口，签名接口如何进行测试？"></a>对于加密接口，签名接口如何进行测试？</h3><p>加密接口：调用接口的时候，首先要清楚接口加密的方式是什么：</p><ol><li><p>对称式加密方式：不常用的有DES,AES，常用的Base64加密方式。</p></li><li><p>非对称加密方式：RSA加密。</p><p>由一个私钥秘密生成双钥（公钥和私钥），公钥加密，私钥解密，私钥加密，公钥解密。</p></li><li><p>只加密不解密。MD5加密，SHA1，SHA3</p></li><li><p>自定义加密规则，混合加密方式。</p></li></ol><p>了解加密规则之后，在请求接口之前先要对参数做对应的加密之后在发送请求。单一的加密方式，postman和jmeter有些是支持的，postman使用Javascript脚本实现，jmeter使用beanshell中的Java代码实现。</p><p>签名接口：了解签名规则后，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="/2021/09/13/System/"/>
      <url>/2021/09/13/System/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a>操作系统基础</h1><h2 id="操作系统基础-1"><a href="#操作系统基础-1" class="headerlink" title="操作系统基础"></a>操作系统基础</h2><ol><li>什么事操作系统？</li></ol><blockquote><ul><li>操作系统简称OS，是管理计算机硬件和软件资源的程序，是计算机的基石。</li><li>操作系统的本质是运行在计算机上的软件程序，用于管理计算机硬件和软件资源。例：运行在电脑的所以程序都是通过操作系统来调用系统内存以及磁盘等硬件资源。</li><li>操作系统屏蔽了硬件层的复杂性。</li><li>操作系统的内核(Kernel)是操作系统的核心部分，它负责系统的内存管理，硬件设备的管理，文件系统的管理以及应用程序的管理。内核是连接应用程序和硬件的桥梁，决定系统的性能和稳定性。</li></ul></blockquote><ol start="2"><li>系统调用</li></ol><blockquote><p>根据进程访问的特点我们可以把进程在系统上的运行分为两个级别：</p><ol><li>用户态：用户运行的进程可以直接读取用户程序数据。</li><li>系统台：可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。</li></ol><blockquote><p>我们运行的程序基本上都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能咋办呢？就需要系统调用了！</p><p>我们在运行用户程序中，凡是与系统态级别的资源有关的操作（文件管理、进程控制、内存管理等）都是必须通过系统调用的方式向操作系统提出服务请求，并由操作系统代为完成。</p><p>这些系统调用按功能大致可以分为以下类：</p><ul><li>设备管理：完成设备的请求或释放、以及设备启动等功能。</li><li>文件管理：完成文件的读、写、创建、删除等功能。</li><li>进程控制：完成进程的创建、撤销、阻塞及唤醒等功能。</li><li>进程通信：完成进程之间的消息传递或信号传递等功能。</li><li>内存管理：完成内存的分配、回收以及获取作业占用内存大小及地址等功能。</li></ul></blockquote></blockquote><h2 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h2><ol><li>进程与线程的区别</li></ol><p>一个进程中可以有多个线程，多个线程可以共享进程的堆和元空间资源，但是每个线程可以有自己的程序计数器、本地方法栈和虚拟机栈。</p><blockquote><p>线程是进程划分成的更小的运行单位，一个进程在执行过程中可以产生多个线程。线程和进程最大的不同在于基本上个进程都是独立的，而个线程则不一定，因为同一个进程的线程极有可能会相互影响，线程执行开销小，但不利于资源的管理和保护；进程则刚好相反。</p></blockquote><ol start="2"><li>进程的几种状态</li></ol><p>进程大致分为5种状态：</p><ul><li>创建状态(new)：进程正在被创建，尚未到就绪状态。</li><li>就绪状态(ready)：进程已处于准备运行的状态，即进程获得了除了处理器之外的一切所需要资源，一旦得到处理器资源（处理器分配时间片）即可运行。</li><li>运行状态(running)：进程正在处理器上运行。</li><li>阻塞状态(waiting)：又称为等待状态，进程正在等待某一事件而暂停运行如等待某资源为可用或等待IO操作完成。</li><li>结束状态(terminated)：进程正在从系统中消失。</li></ul><h1 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h1><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p><strong>应用层(application-layer) 的任务是通过进程间的交互来完成特定网络应用。</strong>应用层协议定义的是应用进程间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议有很多，如域名系统DNS，支持万维网应用的HTTP协议，支持电子邮件的SMTP协议等等。我们把应用层交互的数据单元称为报文。</p><blockquote><p>我们能直接接触的就是应用层，手机或者电脑使用的软件都是在应用层实现，当两个不同设备的应用需要通信的时候，应用就把数据传给下一层，也就输传输层。所以应用层只需要专注为用户提供应用功能，而不用关心数据是如何传输的。就类似于寄快递，我们只需要将包裹交给快递员，他负责运输。而且应用层是工作在操作系统的用户态，传输层及以下是工作在内核态。</p></blockquote><h3 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h3><blockquote><p>域名系统(Domain Name System缩写DNS，Domain Name被译为域名)是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。（百度百科）例如：一个公司的Web网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM公司的域名是 <a href="http://www.ibm.com、oracle/">www.ibm.com、Oracle</a> 公司的域名是 <a href="http://www.oracle.com、cisco/">www.oracle.com、Cisco</a> 公司的域名是 <a href="http://www.cisco.com/">www.cisco.com</a> 等。</p></blockquote><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><blockquote><p>超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。（百度百科）</p></blockquote><h2 id="运输层（传输层）"><a href="#运输层（传输层）" class="headerlink" title="运输层（传输层）"></a>运输层（传输层）</h2><p><strong>运输层(transport layer)的主要任务是负责向两台主机的进程之间的通信提供通用的数据传输服务。</strong> 应用层的数据包会传给传输层，传输层是为应用层提供网络支持的。传输层会有两个传输协议，分别是TCP和UDP。</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>提供<strong>面向连接</strong>的，<strong>可靠的</strong>数据传输服务。</p><blockquote><p><strong>TCP全称传输控制协议(Transmission Control Protocol)</strong>,大部分应用使用的正是TCP传输层协议，比如HTTP应用层协议。TCP相比UDP多了很多特性，比如流量控制、超时重传、拥塞控制等，这些都是为了保证数据包能够可靠的传输给对方。</p></blockquote><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>提供<strong>无连接</strong>的，尽最大努力的数据传输服务（<strong>不保证数据传输的可靠性</strong>）</p><blockquote><p>只负责发送数据包，不保证数据是否能够抵达对方，当它实时性相对更好，传输效率也高。当然，UDP也可以实现可靠传输，把TCP的特性在应用层上实现就可以，不过要实现一个商用的可靠的UDP传输协议，也不是一件简单的事情。</p></blockquote><p>阿孙兴吃vbb</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java垃圾回收</title>
      <link href="/2021/09/10/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
      <url>/2021/09/10/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java垃圾回收"><a href="#Java垃圾回收" class="headerlink" title="Java垃圾回收"></a>Java垃圾回收</h1><h2 id="Java内存分配与回收"><a href="#Java内存分配与回收" class="headerlink" title="Java内存分配与回收"></a>Java内存分配与回收</h2><p>Java的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java自动内存管理最核心的功能是堆内存中对象的分配与回收。</p><p>Java堆是垃圾收集器管理的主要区域，因此也被称为GC堆（Garbagr Collected Heap)，从垃圾回收的角度，犹豫现在收集器基本都采用分类垃圾收集算法，所以Java堆还可以细分为：新生代和老年代：再细致一点有Eden空间、From Survivor、To Survivor空间等。进一步划分的目的是更好的回收内存，或者更快的分配内存。</p><p><strong>堆空间的基本结构：</strong></p><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20210910113122.png" alt="堆空间的基本结构："></p><p><code> Eden 区、From Survivor0(&quot;From&quot;) 区、To Survivor1(&quot;To&quot;) 区都属于新生代，Old Memory 区属于老年代。</code></p><p>一般情况下，对象都会首先在Eden区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入S0或者S1，并且对象的年龄还会加1（Eden区-&gt;Survivor区后对象的年龄变为1），当它的年龄增加的一定程度（默认大小为15岁），就会被晋升到老年代中，对象晋升到老年代的年龄阀值，可以通过XX:MaxTenuringThreshold来设置默认值，这个值会在虚拟机运行过程中进行调整，可以通过XX:_PrintTenuringDistribution来打印出当次GC后的Threshold。</p><blockquote><p><strong>修正：</strong>==“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">uint <span class="title">ageTable::compute_tenuring_threshold</span><span class="params">(<span class="keyword">size_t</span> survivor_capacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//survivor_capacity是survivor空间的大小</span></span><br><span class="line">    <span class="keyword">size_t</span> desired_survivor_size = (<span class="keyword">size_t</span>)((((<span class="keyword">double</span>)survivor_capacity)*TargetSurvivorRatio)/<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">size_t</span> total = <span class="number">0</span>;</span><br><span class="line">    uint age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (age &lt; table_size) &#123;</span><br><span class="line">        <span class="comment">//sizes数组是每个年龄段对象大小</span></span><br><span class="line">        total += sizes[age];</span><br><span class="line">        <span class="keyword">if</span> (total &gt; desired_survivor_size) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        age++;</span><br><span class="line">    &#125;</span><br><span class="line">    uint result = age &lt; MaxTenuringThreshold ? age : MaxTenuringThreshold;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>经过这次GC后，Eden区和”From”区已经被清空。这个时候，”From”和”To”会交换他们的角色，也就是新的”To”就是上次GC前的“From”，新的”From”就是上次GC前的”To”。不管怎样，都会保证名为To的Survivor区域是空的。Minor GC会一直重复这样的过程，在这个过程中，有可能当次Minor GC后，Survivor的”From”区域空间不够用，有一些还达不到进入老年代条件的实例放不下，则放不下的部分会提前进入老年代。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>final, static, this, super关键字</title>
      <link href="/2021/08/23/interview/"/>
      <url>/2021/08/23/interview/</url>
      
        <content type="html"><![CDATA[<h1 id="final-static-this-super关键字"><a href="#final-static-this-super关键字" class="headerlink" title="final, static, this, super关键字"></a>final, static, this, super关键字</h1><h2 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h2><blockquote><p>final关键字,修饰的类、方法、变量是不可变的（不可修改）：</p><ul><li>final修饰的类无法被继承，类中的所有成员方法都会隐式的指定为final类型；</li><li>final修饰的方法不能被重写；</li><li>final修饰的变量是常量，如果是基本数据类型的变量，则数据一旦在初始化之后被不能被更改，如果是引用类型的变量，则在对其初始化之后便不能在指向另外一个对象。</li></ul></blockquote><h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><blockquote><ul><li><strong>修饰成员变量和成员方法：</strong>被static修饰的成员属于类，不属于单个这个类的对象，被类中所有对象共享，可以并且建议通过类名的方式调用。被static声明的成员变量属于静态成员变量，静态变量存放在Java内存区域的方法区。调用格式：<code>类名.静态变量名  类名.静态方法名()</code></li><li><strong>静态代码块:</strong> 静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—&gt;非静态代码块—&gt;构造方法)。 该类不管创建多少对象，静态代码块只执行一次.</li><li><strong>静态内部类（static修饰类的话只能修饰内部类）：</strong> 静态内部类与非静态内部类之间存在一个最大的区别: 非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。没有这个引用就意味着：1. 它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非static成员变量和方法。</li><li><strong>静态导包(用来导入类中的静态资源，1.5 之后的新特性):</strong> 格式为：<code>import static</code> 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，可以直接使用类中静态成员变量和成员方法。</li></ul></blockquote><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><blockquote><p>this关键字用于引用当前实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</span><br><span class="line">    Employees[] employees;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">manageEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> totalEmp = <span class="keyword">this</span>.employees.length;</span><br><span class="line">        System.out.println(<span class="string">&quot;Total employees: &quot;</span> + totalEmp);</span><br><span class="line">        <span class="keyword">this</span>.report();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>this.employees.length:访问类的Manager的当前实例变量</li><li>this.report():调用类Manger的当前实例的方法</li></ul></blockquote><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><blockquote><p>super关键字用于从子类访问副类的变量和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">showNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;number = &quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Super</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.number = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">super</span>.showNumber();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sub类访问父类成员变量number并调用其父类Super的<code>showNumber（）</code> 方法。</p></blockquote><h2 id="super和this注意事项"><a href="#super和this注意事项" class="headerlink" title="super和this注意事项"></a>super和this注意事项</h2><blockquote><ul><li>在构造器中使用<code>super()</code>调用父类中的其他构造方法时，该语句必须处于构造器的首行，否则编译器会报错。另外，this调用本类中的其他构造方法时，也要放在首行。</li><li>this、super不能用在static方法中。</li><li><code> 被static修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享。而this代表对本类对象的引用，指向本类对象；而super代表对父类对象的引用，指向父类对象；所以， **this 和 super 是属于对象范畴的东西，而静态方法是属于类范畴的东西**。</code></li></ul></blockquote><h1 id="并发多线程"><a href="#并发多线程" class="headerlink" title="并发多线程"></a>并发多线程</h1><h2 id="synchronized和Reentrantlock"><a href="#synchronized和Reentrantlock" class="headerlink" title="synchronized和Reentrantlock"></a>synchronized和Reentrantlock</h2><h3 id="ReebtrantLock比synchronized增加了一些高级功能"><a href="#ReebtrantLock比synchronized增加了一些高级功能" class="headerlink" title="ReebtrantLock比synchronized增加了一些高级功能"></a>ReebtrantLock比synchronized增加了一些高级功能</h3><blockquote><p>synchronized是依赖于JVM实现的，在JDK1.6之后对锁进行了大量的优化，（偏向锁、轻量级锁、自旋锁、适应性自旋锁、锁消除、锁粗化等技术来减少锁的操作开销）这些优化都是在虚拟机层面实现的，并没有暴露给我们。</p><p>ReentrantLock是JDK层面实现的（也就是API层面，需要lock()方法配合try/finally语句快来完成）。</p><ul><li><strong>等待可中断</strong> : <code>ReentrantLock</code>提供了一种能够中断等待锁的线程的机制，通过 <code>lock.lockInterruptibly()</code> 来实现这个机制。也就是说正在等待的线程可以选择放弃等待，改为处理其他事情。</li><li><strong>可实现公平锁</strong> : <code>ReentrantLock</code>可以指定是公平锁还是非公平锁。而<code>synchronized</code>只能是非公平锁。所谓的公平锁就是先等待的线程先获得锁。<code>ReentrantLock</code>默认情况是非公平的，可以通过 <code>ReentrantLock</code>类的<code>ReentrantLock(boolean fair)</code>构造方法来制定是否是公平的。</li><li><strong>可实现选择性通知（锁可以绑定多个条件）</strong>: <code>synchronized</code>关键字与<code>wait()</code>和<code>notify()</code>/<code>notifyAll()</code>方法相结合可以实现等待/通知机制。<code>ReentrantLock</code>类当然也可以实现，但是需要借助于<code>Condition</code>接口与<code>newCondition()</code>方法。</li></ul><blockquote><p><code>Condition</code>是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个<code>Lock</code>对象中可以创建多个<code>Condition</code>实例（即对象监视器），<strong>线程对象可以注册在指定的<code>Condition</code>中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用<code>notify()/notifyAll()</code>方法进行通知时，被通知的线程是由 JVM 选择的，用<code>ReentrantLock</code>类结合<code>Condition</code>实例可以实现“选择性通知”</strong> ，这个功能非常重要，而且是 Condition 接口默认提供的。而<code>synchronized</code>关键字就相当于整个 Lock 对象中只有一个<code>Condition</code>实例，所有的线程都注册在它一个身上。如果执行<code>notifyAll()</code>方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而<code>Condition</code>实例的<code>signalAll()</code>方法 只会唤醒注册在该<code>Condition</code>实例中的所有等待线程。</p></blockquote></blockquote><h2 id="并发编程的三个重要特性"><a href="#并发编程的三个重要特性" class="headerlink" title="并发编程的三个重要特性"></a>并发编程的三个重要特性</h2><ul><li>原子性：一个的操作或者多次操作，要么全部都得到执行并且不会受到任何其他因素的干扰而中断，要么所有操作都执行，要么都不执行。synchronized保证了代码片段的原子性。</li><li>可见性：当一变量对共享变量进行了修改，那么另外的线程都是立即可以看到修改后的最新值。volatile保证了共享变量的可见性。</li><li>有序性：代码在执行过程中的先后顺序，Java在编译器以及运行期间的优化，代码的执行顺序未必是编写代码的时候的顺序。volatile可以禁止指令进行重新排序优化。</li></ul><h2 id="synchronized关键字和volatile关键字的区别"><a href="#synchronized关键字和volatile关键字的区别" class="headerlink" title="synchronized关键字和volatile关键字的区别"></a>synchronized关键字和volatile关键字的区别</h2><blockquote><p><code>synchronized</code> 关键字和 <code>volatile</code> 关键字是两个互补的存在，而不是对立的存在！</p><ul><li><strong><code>volatile</code> 关键字</strong>是线程同步的<strong>轻量级实现</strong>，所以 <strong><code>volatile </code>性能肯定比<code>synchronized</code>关键字要好</strong> 。但是 <strong><code>volatile</code> 关键字只能用于变量而 <code>synchronized</code> 关键字可以修饰方法以及代码块</strong> 。</li><li><strong><code>volatile</code> 关键字能保证数据的可见性，但不能保证数据的原子性。<code>synchronized</code> 关键字两者都能保证。</strong></li><li><strong><code>volatile</code>关键字主要用于解决变量在多个线程之间的可见性，而 <code>synchronized</code> 关键字解决的是多个线程之间访问资源的同步性。</strong></li></ul></blockquote><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>封装：</strong>明确表示出允许外部使用的所有成员函数和数据项，内部细节对外部调用透明，外部调用无需修改或者关心内部实现；</p><p><strong>继承：</strong>继承基类的方法，并做出自己的改变和扩展；</p><p><strong>多态：</strong>基于对象所属类的不同，外部对同一方法的调用，实际执行的逻辑不同。 </p><h2 id="JDK-JRE-JVM"><a href="#JDK-JRE-JVM" class="headerlink" title="JDK JRE JVM"></a>JDK JRE JVM</h2><p>JDK:Java Development Kit Java开发工具；</p><p>JRE:Java Runtime Environment Java运行时环境；</p><p>JVM:Java Virtual Machine Java虚拟机。</p><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211025101014.png" alt="Java图"></p><h2 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h2><h3 id="接口和抽象类"><a href="#接口和抽象类" class="headerlink" title="接口和抽象类"></a>接口和抽象类</h3><ul><li>抽象类可以有普通的成员函数，而接口中只能存在public abstract。</li><li>抽象类的成员变量可以是各种类型，而接口的成员变量只能是public static final类型的。</li><li>抽象类只能继承一个，接口可以实现多个</li></ul><blockquote><ul><li>抽象类设计的目的是代码复用，即不同的类具有某些相同的行为时，可以将这些类的相同行为派生出一个抽象类，抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。</li><li>接口是对行为的抽象，核心是定义行为，即子类可以做什么</li><li>使用场景：当你需要关注一个事物的本质时，用抽象类；当你需要关注一个事物的操作时，使用接口实现。</li></ul></blockquote><h2 id="List与Set区别"><a href="#List与Set区别" class="headerlink" title="List与Set区别"></a>List与Set区别</h2><ul><li>List:有序，按照对象进入的顺序保存对象，可重复，允许多个 元素对象，可以使用Iterator遍历取出所有元素，也可以使用for与get(index)的形式取出所有元素。</li><li>Set: 无序，不可重复，最多只能存在一个null的元素，同样可以使用Iterator遍历所有的元素。</li></ul><h2 id="ArrayList与LinkedList区别"><a href="#ArrayList与LinkedList区别" class="headerlink" title="ArrayList与LinkedList区别"></a>ArrayList与LinkedList区别</h2><ul><li>ArrayList:基于动态数组，连续内存存储，适合下标访问(随机访问)，扩容机制:数组长度固定，超出长度存数据时需要新建数组，然后将旧数组的数据拷贝到新数组中，如果不是尾部插入数据还会涉及到元素移动，使用尾部插入法并制定初始容量可以极大的提高性能、甚至超过LinkedList(需要大量的创建node对象)。</li><li>LinkedList:基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询:需要遍历，LinkedList遍历需要使用iterator不能使用for循环，每次for循环中通过get(index)取出元素是都需要对List重新遍历，性能消耗极大。使用indexOf返回元素索引时当结果为空时会遍历整个列表。</li></ul><h2 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h2><ul><li><p>HashMap是非线程安全的，可以存储null的key和value，但null作为键只能有一个，null作为值可以有多个。</p></li><li><p>HashTable使用synchronized修饰，是线程安全的，HashTable不允许有 null键和null值，否则会抛出NullPointerException</p><blockquote><p>效率：因为线程安全的问题，HashMap要比HashTable效率高一点。另外，HashTable基本被淘汰，不要在代码中使用它（如果你要保证线程安全的话就使用ConcurrentHashMap吧！）。</p></blockquote></li></ul><h2 id="如何实现一个IOC容器"><a href="#如何实现一个IOC容器" class="headerlink" title="如何实现一个IOC容器"></a>如何实现一个IOC容器</h2><p>1、配置文件配置包扫描路径</p><p>2、递归包扫描获取.classwenjian</p><p>3、反射、确定需要交给IOC管理的类</p><p>4、对需要注入的类进行以来注入</p><blockquote><ul><li>配置文件中指定需要扫描的包路径</li><li>定义一些注解，分别表示访问控制层、业务服务层、数据持久层、依赖注入注解、获取配置文件注释</li><li>从配置文件中获取需要扫描的包路径，获取到当前路径下的文件信息及文件夹信息，我们将当前路径下所有以.class结尾的文件添加到一个Set集合中进行存储</li><li>遍历这个Set集合，获取在类上有指定注解的类，并将其交给IOC容器，定义一个安全的MAP用来存储这些对象</li><li>遍历这个IOC容器，获取每一个类的实例，判断里面是有有依赖其他的类的实例，然后进行递归注入</li></ul></blockquote><h2 id="Java类加载器"><a href="#Java类加载器" class="headerlink" title="Java类加载器"></a>Java类加载器</h2><p>JDK自带有三个类加载器：bootstrap ClassLoader、ExtClassLoader、AppClassLoader。</p><p>BootStrapClassLoader是ExtClassLoader的类加载，默认负责加载%JAVA_HOME%/lib下的jar包和class文件。</p><p>ExtClassLoader是AppClassLoader的父类加载器，负责加载%JAVA_HOME%/lib/ext文件夹下的jar包和class类。</p><p>AppClassLoader是自定义类加载器的父类，负责加载classpath下的类文件。继承classLoader实现自定义类加载器。 </p><h2 id="并发的三大特性"><a href="#并发的三大特性" class="headerlink" title="并发的三大特性"></a>并发的三大特性</h2><ul><li>原子性：一个操作要么全部执行，要么都不执行（如银行转账操作）Synchronized</li><li>可见性：一个线程改变变量的值时，其他现场立即可见 Volatitle</li><li>有序性：代码在执行的过程中的先后顺序，Java在编译器以及运行期间的优化，代码的执行顺序未必是编写代码时候的顺序 Volatitle</li></ul><h2 id="为什么使用线程池，解释线程池的参数"><a href="#为什么使用线程池，解释线程池的参数" class="headerlink" title="为什么使用线程池，解释线程池的参数"></a>为什么使用线程池，解释线程池的参数</h2><ul><li><p>降低资源消耗；提高线程利用率，降低创建和销毁线程的消耗。</p></li><li><p>提高响应速度；任务来了，直接有线程可用可执行，而不是先创建线程再执行。</p></li><li><p>提高线程的可管理性；线程时稀缺资源，使用线程池可用统一分配调优监控。</p><blockquote><ul><li>corePoolSize代表核心线程数，也就是正常情况下创建工作的线程数，这些线程创建之后不会被消除，而是一种常驻线程</li><li>maxinumpoolSize代表最大的线程数，它与核心线程数相对应，表示最大允许被创建的线程数，比如当前任务较多，将核心线程数都用完了，还无法满足需求时，此时就会创建新的线程，但是线程池内线程总数不会超过最大线程数</li><li>keepAliveTime、unit表示超出核心线程数之外的线程的空闲存活时间，也就是核心线程不会消除，但是超出核心线程数的部分线程如果空闲一定时间则会被消除，我们可以通过setKeepAliveTime来设置空闲时间</li><li>workQueue用来存放待执行的任务，假设我们现在核心线程都已经被使用，还有任务进来则全部放入队列，直到整个队列被放满但任务还再持续进入则会开始创建新的线程</li><li>ThreadFactory实际上是一个线程工厂，用来生产线程执行任务。我们可以选择使用默认的创建工厂，产生的线程都在一个组内，拥有相同的优先级，且都不是守护线程。当然我们也可以选择自定义线程工厂。</li><li>Handler任务拒绝策略，有两种情况，第一种是当我们调用shutdown等方法关闭线程池后，这时候即使线程池内部还有没有执行完的任务在执行，但是线程池已经关闭，我们再继续向线程池提交任务就会遭到拒绝。另一种情况就是当达到最大线程数，线程池已经没有能力继续处理提交的新任务时，这时也是拒绝。</li></ul></blockquote></li></ul><h2 id="线程池中阻塞队列的作用？为什么是先添加队列而不是先创建最大线程？"><a href="#线程池中阻塞队列的作用？为什么是先添加队列而不是先创建最大线程？" class="headerlink" title="线程池中阻塞队列的作用？为什么是先添加队列而不是先创建最大线程？"></a>线程池中阻塞队列的作用？为什么是先添加队列而不是先创建最大线程？</h2><ul><li>一般的队列只能保证作为一个有限长度的缓存区，如果超出缓冲长度，就无法保留当前的任务，阻塞队列通过阻塞可以保留住当前想要继续入队的任务。</li><li>阻塞队列可以保证任务队列中没有任务时阻塞获取任务的线程，使其线程进入wait状态，释放cpu资源</li><li>阻塞队列自带阻塞和唤醒的功能，不需要额外处理，无任务执行时，线程池利用阻塞队列的take方法挂起，从而维持核心线程的存活，不至于一直占用cpu资源</li><li>在创建新线程的时候，是需要获取全局锁的，这个时候其他的就得阻塞，影响了整体效率</li></ul><h2 id="线程池中线程复用原理"><a href="#线程池中线程复用原理" class="headerlink" title="线程池中线程复用原理"></a>线程池中线程复用原理</h2><p>线程池将线程和任务进行解耦，线程是线程，任务是任务，摆脱之前通过Thread创建线程时的一个线程必须对应一个任务的限制。在线程池中，同一个线程可以从阻塞队列中不断获取新任务来执行，其核心原理在于线程池对Thread进行了封装，并不是每次执行任务都会调用Thread.start()来创建新线程，而是让每一个线程去执行一个“循环任务”，在这个“循环任务”中不停检查是否有任务需要执行，如果有则直接执行，也就是有则直接调用任务中的run()方法，将run方法当成一个普通的方法执行，通过这种方式只使用固定的线程就将所有任务的run方法串联起来。</p><h2 id="Spring支持的bean的作用域"><a href="#Spring支持的bean的作用域" class="headerlink" title="Spring支持的bean的作用域"></a>Spring支持的bean的作用域</h2><ul><li>Singleton:单例</li><li>Prototype:每次注入都产生一个新对象</li><li>Request:每一个HTTP请求都产生一个实例</li><li>Session:每一个HTTP请求都会产生一个新的bean</li><li>Global-session:全局作用域</li></ul><h2 id="Spring中都用到了那些设计模式"><a href="#Spring中都用到了那些设计模式" class="headerlink" title="Spring中都用到了那些设计模式"></a>Spring中都用到了那些设计模式</h2><ul><li>简单工厂：由一个工厂类根据传入的参数，动态决定应该创建那个产品类。Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获取bean对象，但是是否传入参数后创建还是传入参数前创建这个要根据具体情况来定</li><li>工厂方法：实现一个FactoryBean接口的bean是一类叫做factory的bean，其特点是spring会根据使用getBean()调用获得该bean时会自动调用该bean的getObject()方法，所以返回的都不是factory这个bean，而是这个bean.getObject()方法的返回值</li><li>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。Spring对单例的实现：Spring中的单例模式完成了后半句话，即提供了全局的访问BeanFactory但没有从构造器级别去控制单例，这时因为Spring管理的是任意的Java对象</li><li>适配器模式：Spring定义了一个适配接口，使得每一个Controller有一种对应的适配器实现类，让适配器代替Controller执行相应的方法，这样在扩展controller时，只需要增加一个适配器就完成了SpringMVC的扩展，HandlerAdapter</li><li>装饰器模式：动态的给一个对象增加一些额外的职责。就增加功能来说，Decorator模式相比生成子类更加灵活。带wrapper</li><li>动态代理：切面在应用运行时刻被注入，一般情况下在注入切面时，AOP容器会为目标对象创建动态的一个代理对象</li><li>观察者模式：Spring的事件驱动模型使用的是观察者模式，Spring对Observer模式常用的地方是listener的实现。</li><li>策略模式：Spring框架的资源访问Resource接口</li></ul><blockquote><ul><li><strong>工厂设计模式</strong> : Spring 使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li><li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li><li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li><li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li><li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li><li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li><li><strong>适配器模式</strong> : Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li></ul></blockquote><h2 id="Spring-Boot、Spring-MVC和Spring有什么区别"><a href="#Spring-Boot、Spring-MVC和Spring有什么区别" class="headerlink" title="Spring Boot、Spring MVC和Spring有什么区别"></a>Spring Boot、Spring MVC和Spring有什么区别</h2><blockquote><p>spring是一个IOC容器，用来管理Bean，使用依赖注入实现控制反转，可以很方便的整合各种框架，提供AOP机制弥补OOP的代码重复问题、更方便将不同类不同方法中的共同处理抽取成切面、自动注入给方法执行，比如日志、异常等。</p><p>springmvc是spring对Web框架的一个解决方案，提供一个总的前控制器Servlet，用来接收请求，然后定义了一套路由策略（URL到handle的映射）及适配执行handle，将handle结果使用视图展现给前端。</p><p>Spring Boot是一个Spring提供的快速开发工具包，让程序员能更方便、快速的开发Spring+springMVC应用，简化了配置（约定了默认配置），整合了一系列的解决方案（starter机制）、redias、mongodb、es、可以开箱即用</p></blockquote><h2 id="SpringMVC工作流程"><a href="#SpringMVC工作流程" class="headerlink" title="SpringMVC工作流程"></a>SpringMVC工作流程</h2><ol><li>用户发送请求到前端控制器DispathcherServlet.</li><li>DispathcherServlet收到请求调用HandlerMapping处理映射器。</li><li>处理器映射器找到具体的处理器（根据XML配置、注解进行查找），生成处理器及处理器拦截器（如果有则生成）一并返回给DispathcherServlet。</li><li>DispathcherServlet调用HandlerAdapter处理器适配器。</li><li>HandlerAdapter经过适配调用具体的处理器（Controller，也叫后端控制器）。</li><li>Controller执行完成返回ModelAndView。</li><li>HandlerAdapter将Controller执行结果ModelAndView返回给DispathcherServlet。</li><li>DispathcherServlet将ModelAndView传给ViewReslover视图解析器。</li><li>ViewReslover解析后返回具体View。</li><li>DispathcherServlet根据View进行渲染视图（即将模型数据填充至视图中）。</li><li>DispathcherServlet响应用户。</li></ol><blockquote><ol><li>客户端（浏览器）发送请求，直接请求到 <code>DispatcherServlet</code>。</li><li><code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。</li><li>解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由 <code>HandlerAdapter</code> 适配器处理。</li><li><code>HandlerAdapter</code> 会根据 <code>Handler</code>来调用真正的处理器开处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 <code>ModelAndView</code> 对象，<code>Model</code> 是返回的数据对象，<code>View</code> 是个逻辑上的 <code>View</code>。</li><li><code>ViewResolver</code> 会根据逻辑 <code>View</code> 查找实际的 <code>View</code>。</li><li><code>DispaterServlet</code> 把返回的 <code>Model</code> 传给 <code>View</code>（视图渲染）。</li><li>把 <code>View</code> 返回给请求者（浏览器）</li></ol></blockquote><h2 id="Spring-Boot自动装配"><a href="#Spring-Boot自动装配" class="headerlink" title="Spring Boot自动装配"></a>Spring Boot自动装配</h2><blockquote><p>SpringBoot 定义了一套接口规范，这套规范规定：SpringBoot 在启动时会扫描外部引用 jar 包中的<code>META-INF/spring.factories</code>文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 SpringBoot 定义的标准，就能将自己的功能装置进 SpringBoot。</p><p><strong>通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。</strong></p></blockquote><blockquote><p>Spring Boot 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 SpringFactoriesLoader 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖</p></blockquote><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="spring事务机制"><a href="#spring事务机制" class="headerlink" title="spring事务机制"></a>spring事务机制</h2><ol><li>Spring事务底层是基于数据库事务和AOP机制的</li><li>首先对于使用了@Transactional注解的Bean，spring会创建一个代理对象作为bean</li><li>当调用代理对象的方法时，会判断方法上是否加了@Transactional注解</li><li>如果加了，那么利用事务管理器创建一个数据库连接</li><li>并且修改数据库连接的autocommit属性为false，禁止此连接自动提交</li><li>然后执行当前方法，方法会执行sql</li><li>执行完当前方法后，如果没有出现异常就直接提交事务</li><li>如果出现异常，并且这个异常是需要回滚的就会回滚事务，否则仍然提交事务</li><li>Spring的隔离级别就是数据库的隔离级别</li></ol><h2 id="redis应用场景"><a href="#redis应用场景" class="headerlink" title="redis应用场景"></a>redis应用场景</h2><ol><li>5大value类型：String、Hash、List、Set、SortedSet</li><li>基本上就是缓存～！</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="/2021/08/18/Git%E4%BD%BF%E7%94%A8-git-use/"/>
      <url>/2021/08/18/Git%E4%BD%BF%E7%94%A8-git-use/</url>
      
        <content type="html"><![CDATA[<h3 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">1.配置Git设置名字和邮箱地址</span><br><span class="line">git config --global user.name + &quot;名字&quot;</span><br><span class="line">git config --global user.email + &quot;邮箱地址&quot;</span><br><span class="line"></span><br><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">git init 初始化</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git init [project-name]</span><br><span class="line">下载一个项目和它的整个代码历史</span><br><span class="line">git clone [url]</span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">git mv [file-original] [file-renamed]</span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">git commit &quot;first commit&quot; [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.查看提交日志</span><br><span class="line">git log</span><br><span class="line">git reflog</span><br><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">git checkout -b [branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">git checkout [branch-name]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">git merge [branch]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">git push [remote] --force</span><br><span class="line">#从远程仓库拉取修改的代码</span><br><span class="line">git pull git-workspace master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#远程仓库设置别名</span><br><span class="line">git remote add git-workspace https://github.com/bixby/git-workspace.git</span><br><span class="line"></span><br><span class="line">#克隆远程仓库文件</span><br><span class="line">git clone https://github.com/bixby/git-workspace.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Study Day-01</title>
      <link href="/2021/08/18/Java%20Study%20Day-01-javastudyday-01/"/>
      <url>/2021/08/18/Java%20Study%20Day-01-javastudyday-01/</url>
      
        <content type="html"><![CDATA[<h4 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h4><ul><li>抽象类可以有普通的成员函数，而接口中只能存在public abstract。</li><li>抽象类的成员变量可以是各种类型，而接口的成员变量只能是public static final类型的。</li><li>抽象类只能继承一个，接口可以实现多个<blockquote><p>抽象类设计的目的是代码复用，即不同的类具有某些相同的行为时，可以将这些类的相同行为派生出一个抽象类，抽象类包含并实现子类的通用特性，将子类存在差异化的特性进行抽象，交由子类去实现。</p></blockquote></li></ul><blockquote><p>接口是对行为的抽象，核心是定义行为，即子类可以做什么</p></blockquote><blockquote><p>使用场景：当你需要关注一个事物的本质时，用抽象类；当你需要关注一个事物的操作时，使用接口实现。 </p></blockquote><h4 id="List与Set的区别"><a href="#List与Set的区别" class="headerlink" title="List与Set的区别"></a>List与Set的区别</h4><ul><li>List:有序，按照对象进入的顺序保存对象，可重复，允许多个 元素对象，可以使用Iterator遍历取出所有元素，也可以使用for与get(index)的形式取出所有元素。</li><li>Set: 无序，不可重复，最多只能存在一个null的元素，同样可以使用Iterator遍历所有的元素。</li></ul><h4 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h4><ul><li>ArrayList:基于动态数组，连续内存存储，适合下标访问(随机访问)，扩容机制:数组长度固定，超出长度存数据时需要新建数组，然后将旧数组的数据拷贝到新数组中，如果不是尾部插入数据还会涉及到元素移动，使用尾部插入法并制定初始容量可以极大的提高性能、甚至超过LinkedList(需要大量的创建node对象)。</li><li>LinkedList:基于链表，可以存储在分散的内存中，适合做数据插入及删除操作，不适合查询:需要遍历，LinkedList遍历需要使用iterator不能使用for循环，每次for循环中通过get(index)取出元素是都需要对List重新遍历，性能消耗极大。使用indexOf返回元素索引时当结果为空时会遍历整个列表。</li></ul><h4 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h4><ul><li>HashMap是非线程安全的，可以存储null的key和value，但null作为键只能有一个，null作为值可以有多个。</li><li>HashTable使用synchronized修饰，是线程安全的，HashTable不允许有 null键和null值，否则会抛出NullPointerException<blockquote><p>效率：因为线程安全的问题，HashMap要比HashTable效率高一点。另外，HashTable基本被淘汰，不要在代码中使用它（如果你要保证线程安全的话就使用ConcurrentHashMap吧！）。</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java basic knowledge study-01</title>
      <link href="/2021/08/18/Java%20basic%20knowledge%20study-01-javabasicknowledgestudy-01/"/>
      <url>/2021/08/18/Java%20basic%20knowledge%20study-01-javabasicknowledgestudy-01/</url>
      
        <content type="html"><![CDATA[<h4 id="String-StringBuffer-and-StringBuilder"><a href="#String-StringBuffer-and-StringBuilder" class="headerlink" title="String, StringBuffer and StringBuilder"></a>String, StringBuffer and StringBuilder</h4><blockquote><p>String由final修饰，不可变；<br>StringBuffer是线程安全的，由修饰符sychronized修饰，是可变的<br>StringBuilder 不是线程安全的；<br>经常需要改变字符串内容使用String, StringBuffer；优先使用StringBuilder，多线程使用共享变量时使用StringBuffer</p></blockquote><h4 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h4><ul><li>基本数据类型([1]表示一个字节也就是8bit)<blockquote><p>整数、浮点型：byte[1],short[2],int[4],long[8],float[4],double[8];<br>字符型：char[2]存放单个字符;布尔类型：boolean[1]</p></blockquote></li><li>引用数据类型<blockquote><p>类、接口、数组[]</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_基本数据类型学习</title>
      <link href="/2021/08/18/Java_%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0-java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/08/18/Java_%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0-java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><ul><li>自动类型转换：<br>精度小的类型自动转换为精度大的数据类型，数据精度类型按精度大小排序为<ul><li>char → int →long → float → double </li><li>byte → short → int → long → float → double<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">float</span> m = n + <span class="number">1.1</span>; <span class="comment">//错误 n + 1.1 =&gt;结果类型是double</span></span><br><span class="line"><span class="keyword">double</span> x = n + <span class="number">1.1</span>; <span class="comment">//对 n + 1.1 =&gt;结果类型是double</span></span><br><span class="line"><span class="comment">//（byte, short）和char之间不会相互自动转换，</span></span><br><span class="line"><span class="comment">//  当把具体数赋值给byte时，</span></span><br><span class="line"><span class="comment">//  首先判断是否在byte范围内，如果是就可以</span></span><br><span class="line"><span class="keyword">byte</span> b1 = <span class="number">10</span>; <span class="comment">//对，-128-127</span></span><br><span class="line"><span class="comment">//int n2 = 1; //n2是int</span></span><br><span class="line"><span class="comment">//byte b2 = n2; //错误，原因：如果是变量赋值，判断类型</span></span><br><span class="line"><span class="keyword">char</span> c1 = b1; <span class="comment">//错误，原因：byte不能自动转化为char</span></span><br><span class="line"><span class="comment">//byte、short、char三者可以计算，在计算时首先转换为int类型</span></span><br><span class="line"><span class="keyword">byte</span> b2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">short</span> s1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">short</span> s2 = b2 + s2;<span class="comment">//错误，b2 + s2 =&gt;int</span></span><br><span class="line"><span class="keyword">int</span> s2 = b2 + s2;<span class="comment">//对</span></span><br><span class="line"><span class="keyword">byte</span> s3 = b2 + s2;<span class="comment">//错误，出现这三者运算都会转换为int</span></span><br><span class="line"><span class="comment">//boolean不参与类型的自动转换</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="http://1.15.34.179:8090/upload/2021/05/%E6%88%AA%E5%B1%8F2021-05-23%2009.15.49-0bb1fe10ccf84ba1a1cf76bfcbff7d42.png" alt="截屏20210523 09.15.49.png">        </p><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><blockquote><p>int i = 1;<br>  i = i++;<br>  System.out.printIn(i);//输出：1，原因：i++是先赋值后加一；++i是先加一后赋值</p></blockquote><p><img src="http://1.15.34.179:8090/upload/2021/05/%E6%88%AA%E5%B1%8F2021-05-23%2011.57.56-0c41f9a66deb4c5f93bbe28cd94a8d13.png" alt="截屏20210523 11.57.56.png"></p><p><img src="http://1.15.34.179:8090/upload/2021/05/%E6%88%AA%E5%B1%8F2021-05-23%2011.58.12-390288e5a8644c7f85de548358f16fce.png" alt="截屏20210523 11.58.12.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录01</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9501-leetcode01twosum/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9501-leetcode01twosum/</url>
      
        <content type="html"><![CDATA[<h3 id="两数之和（LeetCode01-Two-Sum）"><a href="#两数之和（LeetCode01-Two-Sum）" class="headerlink" title="两数之和（LeetCode01:Two Sum）"></a>两数之和（LeetCode01:Two Sum）</h3><p>给定一个整数数组nums 和一个整数目标值target，请你在该数组中找出和为目标值target的那两个整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案。</p><blockquote><p>示例1：输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</p></blockquote><blockquote><p>示例2：输入：nums = [3,2,4], target = 6<br>输出：[1,2]</p></blockquote><blockquote><p>示例3：输入：nums = [3,3], target = 6<br>输出：[0,1]</p></blockquote><blockquote><p>2 &lt;= nums.length &lt;= 104<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案</p></blockquote><blockquote><p>第一次看到题目想到的是使用两次for循环的暴力方式遍历数组，这种方法可以得到最终结果，但是不是最优解，时间复杂的是最高的O(n^2)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=(i+<span class="number">1</span>);j&lt;nums.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                ans[<span class="number">0</span>]=i;</span><br><span class="line">                ans[<span class="number">1</span>]=j;</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二种解法：使用hash的方式(Key,Value)保存数组中的值同时记录下标，然后利用Map的containKey()方法判断是否存在需要的目标数，返回最终结果的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> target = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span>[] result = twoSum(nums,target);</span><br><span class="line">    System.out.println(result[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(result[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> result = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(result))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,map.get(result)&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录02</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9502-leetcode02addtwonumbers/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9502-leetcode02addtwonumbers/</url>
      
        <content type="html"><![CDATA[<h3 id="两数两加-LeetCode02-Add-Two-Numbers"><a href="#两数两加-LeetCode02-Add-Two-Numbers" class="headerlink" title="两数两加(LeetCode02:Add Two Numbers)"></a>两数两加(LeetCode02:Add Two Numbers)</h3><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字0之外，这两个数都不会以0开头。</p><blockquote><p>示例1：输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.</p></blockquote><blockquote><p>示例2：输入：l1 = [0], l2 = [0]<br>输出：[0]</p></blockquote><blockquote><p>示例3：输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p></blockquote><blockquote><p>提示：每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;= Node.val &lt;= 9<br>题目数据保证列表表示的数字不含前导零</p></blockquote><blockquote><p>首先每一位相加肯定会产生进位，我们用carry表示。进位最大会是1<br>++1.初始化一个节点的头，dummyhead，但是这个头不存储数字。并且将curr指向它。<br>2.初始化进位carry为0 。<br>3.初始化p和q分别为给定的两个链表l1和l2的头，也就是个位。<br>4.循环，直到l1和l2全部到达null 。<br>    4.1设置x为p节点的值，如果p已经到达了null，设置x为0 。<br>    4.2设置y为q节点的值，如果q已经到达了null，设置y为0 。<br>    4.3设置sum = x + y + carry 。<br>    4.4更新carry = sum / 10 。<br>    4.5创建一个值为sum % 10 的节点，并将curr的next指向它，同时curr指向变为当前的新节点。<br>    4.6向前移动p和q 。<br>5.判断carry是否等于1，如果等于1，在链表末尾增加一个为1的节点。<br>6.返回dummyhead的next，也就是个位数开始的地方。++<br>初始化的节点dummyhead没有存储值，最后返回dummyhead的next。这样的好处是不用单独对head进行判断改变值。也就是如果一开始的head就是代表个位数，那么开始初始化的时候并不知道它的值是多少，所以还需要在进入循环前单独对它进行值的更正，不能像现在一样只用一个循环简洁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">            ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">            ListNode p = l1, q = l2 , curr = dummyHead;</span><br><span class="line">            <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="keyword">null</span> || q != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> x = (p != <span class="keyword">null</span>) ? p.val:<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> y = (q != <span class="keyword">null</span>) ? q.val:<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> sum = x + y +carry;</span><br><span class="line">                carry = sum / <span class="number">10</span>;</span><br><span class="line">                curr.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                curr = curr.next;</span><br><span class="line">                <span class="keyword">if</span> (p != <span class="keyword">null</span>) p = p.next;</span><br><span class="line">                <span class="keyword">if</span> (q != <span class="keyword">null</span>) q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (carry &gt;<span class="number">0</span>)&#123;</span><br><span class="line">                curr.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录07</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9507-leetcode07reverseinteger/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9507-leetcode07reverseinteger/</url>
      
        <content type="html"><![CDATA[<h3 id="整数反转-LeetCode07-Reverse-Integer"><a href="#整数反转-LeetCode07-Reverse-Integer" class="headerlink" title="整数反转(LeetCode07:Reverse Integer)"></a>整数反转(LeetCode07:Reverse Integer)</h3><p>给你一个32位的有符号整数x，返回将x中的数字部分反转后的结果<br>如果反转后整数超过32位的有符号整数的范围 [−2^31 , 2^31 − 1] ，就返回 0。<br>假设环境不允许存储64位整数（有符号或无符号）。</p><blockquote><p>示例1:输入：x = 123<br>输出：321</p></blockquote><blockquote><p>示例2:输入：x = -123<br>输出：-321</p></blockquote><blockquote><p>示例3:输入：x = 120<br>输出：21</p></blockquote><blockquote><p>示例4:输入：x = 0<br>输出：0</p></blockquote><blockquote><p>提示：-231 &lt;= x &lt;= 231 - 1</p></blockquote><blockquote><p>取余得到个位数，然后除以10去掉个位数，然后用一个变量保存倒置的数.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> target = -<span class="number">132</span>;</span><br><span class="line">    <span class="keyword">int</span> result = reverse(target);</span><br><span class="line">    System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (result &gt; Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; Integer.MIN_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        result = result * <span class="number">10</span> + pop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录09</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9509-leetcode09palindromenumber/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9509-leetcode09palindromenumber/</url>
      
        <content type="html"><![CDATA[<h3 id="回文数-LeetCode09-Palindrome-Number"><a href="#回文数-LeetCode09-Palindrome-Number" class="headerlink" title="回文数(LeetCode09:Palindrome Number)"></a>回文数(LeetCode09:Palindrome Number)</h3><p>给你一个整数x，如果x是一个回文整数，返回true；否则，返回false。<br>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121 是回文，而123不是。</p><blockquote><p>示例1：输入：x = 121<br>输出：true</p></blockquote><blockquote><p>示例2：输入：x = -121<br>输出：false<br>解释：从左向右读, 为-121。 从右向左读, 为121-。因此它不是一个回文数。</p></blockquote><blockquote><p>示例3：输入：x = 10<br>输出：false<br>解释：从右向左读, 为01。因此它不是一个回文数。</p></blockquote><blockquote><p>示例4：输入：x = -101<br>输出：false</p></blockquote><blockquote><p>提示：-2^31 &lt;= x &lt;= 2^31 - 1</p></blockquote><blockquote><p>可以采用第七题的方式也就是取返的方式，再判断取返之后是非和之前的数相等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">13231</span>;</span><br><span class="line">        <span class="keyword">boolean</span> result = isPalindrome(target);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (result1 &gt; Integer.MAX_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (result1 &lt; Integer.MIN_VALUE/<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            result1 = result1 * <span class="number">10</span> + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result2 = reverse(x);</span><br><span class="line">        <span class="keyword">return</span> x == result2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>其他解法：将右半部分倒置然后和左半部比较就可以了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> digit = (<span class="keyword">int</span>) (Math.log(x) / Math.log(<span class="number">10</span>) + <span class="number">1</span>); <span class="comment">//总位数</span></span><br><span class="line">    <span class="keyword">int</span> revert = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pop = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//倒置右半部分 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digit / <span class="number">2</span>; i++) &#123; </span><br><span class="line">        pop = x % <span class="number">10</span>;</span><br><span class="line">        revert = revert * <span class="number">10</span> + pop;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (digit % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; x == revert) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//奇数情况 x 除以 10 去除 1 位</span></span><br><span class="line">    <span class="keyword">if</span> (digit % <span class="number">2</span> != <span class="number">0</span> &amp;&amp; x / <span class="number">10</span> == revert) &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录26</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9526-leetcode26removeduplicatesfromsortedarray/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9526-leetcode26removeduplicatesfromsortedarray/</url>
      
        <content type="html"><![CDATA[<h3 id="删除有序数组中的重复项并返回新数组的长度-LeetCode26-Remove-Duplicates-from-Sorted-Array"><a href="#删除有序数组中的重复项并返回新数组的长度-LeetCode26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="删除有序数组中的重复项并返回新数组的长度(LeetCode26:Remove Duplicates from Sorted Array)"></a>删除有序数组中的重复项并返回新数组的长度(LeetCode26:Remove Duplicates from Sorted Array)</h3><p>给你一个有序数组nums，请你原地删除重复出现的元素，使每个元素只出现一次 ，返回删除后数组的新长度。<br>不要使用额外的数组空间，你必须在原地修改输入数组并在使用O(1)额外空间的条件下完成。</p><blockquote><p>示例1：输入：nums = [1,1,2]<br>输出：2, nums = [1,2]<br>解释：函数应该返回新的长度2 ，并且原数组nums的前两个元素被修改为1, 2。不需要考虑数组中超出新长度后面的元素。</p></blockquote><blockquote><p>示例2：输入：nums = [0,0,1,1,1,2,2,3,3,4]<br>输出：5, nums = [0,1,2,3,4]<br>解释：函数应该返回新的长度5，并且原数组nums的前五个元素被修改为0,1,2,3,4。不需要考虑数组中超出新长度后面的元素。</p></blockquote><blockquote><p>有序数组，找到相同项，直接抛弃</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,&#125;;</span><br><span class="line">       <span class="keyword">int</span> result = removeDuplicates(nums);</span><br><span class="line">       System.out.println(result);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (nums[i] != nums[index])&#123;</span><br><span class="line">               index++;</span><br><span class="line">               nums[index] = nums[i];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录27</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9527-leetcode27removeelement/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9527-leetcode27removeelement/</url>
      
        <content type="html"><![CDATA[<h3 id="移除元素-LeetCode27-Remove-Element"><a href="#移除元素-LeetCode27-Remove-Element" class="headerlink" title="移除元素(LeetCode27:Remove Element)"></a>移除元素(LeetCode27:Remove Element)</h3><p>给你一个数组nums和一个值val，你需要原地移除所有数值等于val的元素，并返回移除后数组的新长度。不要使用额外的数组空间，你必须仅使用O(1)额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><blockquote><p>示例1:输入：nums = [3,2,2,3], val = 3<br>输出：2, nums = [2,2]<br>解释：函数应该返回新的长度2, 并且nums中的前两个元素均为2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为2 ，而nums = [2,2,3,3]或nums = [2,2,0,0]，也会被视作正确答案。</p></blockquote><blockquote><p>示例2:输入：nums = [0,1,2,2,3,0,4,2], val = 2<br>输出：5, nums = [0,1,4,0,3]<br>解释：函数应该返回新的长度5, 并且 nums 中的前五个元素为0,1,3,0,4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><blockquote><p>与26题有异曲同工之处，解法相同，找到相同的元素直接抛弃，把后面的值向前移。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> result = removeElement(nums,target);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != val)&#123;</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> index;<span class="comment">//最后返回的index的值已经是数组的下角标加一的值了所以不用在加一。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录35</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9535-leetcode35searchinsertposition/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9535-leetcode35searchinsertposition/</url>
      
        <content type="html"><![CDATA[<h3 id="搜索插入位置-LeetCode35-Search-Insert-Position"><a href="#搜索插入位置-LeetCode35-Search-Insert-Position" class="headerlink" title="搜索插入位置(LeetCode35:Search Insert Position)"></a>搜索插入位置(LeetCode35:Search Insert Position)</h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。你可以假设数组中无重复元素。</p><blockquote><p>示例1：输入: [1,3,5,6], 5<br>输出: 2</p></blockquote><blockquote><p>示例2：输入: [1,3,5,6], 2<br>输出: 1</p></blockquote><blockquote><p>示例3：输入: [1,3,5,6], 7<br>输出: 4</p></blockquote><blockquote><p>示例4：输入: [1,3,5,6], 0<br>输出: 0</p></blockquote><blockquote><p>二分法查找，重点是返回值是什么</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,&#125;;</span><br><span class="line">        <span class="keyword">int</span> target = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> result = removeElement(nums,target);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (val == nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (val &lt; nums[mid])&#123;</span><br><span class="line">                end = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                start = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> start;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录283</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95283-leetcode283movezeroes/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95283-leetcode283movezeroes/</url>
      
        <content type="html"><![CDATA[<h3 id="移动零-LeetCode283-Move-Zeroes"><a href="#移动零-LeetCode283-Move-Zeroes" class="headerlink" title="移动零(LeetCode283:Move Zeroes)"></a>移动零(LeetCode283:Move Zeroes)</h3><p>给定一个数组nums，编写一个函数将所有0移动到数组的末尾，同时保持非零元素的相对顺序。</p><blockquote><p>示例：输入: [0,1,0,3,12]<br>输出: [1,3,12,0,0]<br>遍历数组元素，遇到零就往后移</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,&#125;;</span><br><span class="line">        moveZeroes(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[index];</span><br><span class="line">                nums[index] = nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题记录485</title>
      <link href="/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95485-leetcode485maxconsecutiveones/"/>
      <url>/2021/08/18/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95485-leetcode485maxconsecutiveones/</url>
      
        <content type="html"><![CDATA[<h3 id="最大连续1的个数-LeetCode485-Max-Consecutive-Ones"><a href="#最大连续1的个数-LeetCode485-Max-Consecutive-Ones" class="headerlink" title="最大连续1的个数(LeetCode485:Max Consecutive Ones)"></a>最大连续1的个数(LeetCode485:Max Consecutive Ones)</h3><p>给定一个二进制数组， 计算其中最大连续 1 的个数。</p><blockquote><p>示例：输入：[1,1,0,1,1,1]<br>输出：3<br>解释：开头的两位和最后的三位都是连续1，所以最大连续1的个数是3.</p></blockquote><blockquote><p>用一个result保存连续1的个数，当过程中出现0时把result的值给max并将result重新归0，然后继续向后遍历出现1，result的值就加1，最后返回的结果是max与result中值大的一项</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(findMaxConsecutiveOnes(nums));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMaxConsecutiveOnes</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                result++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                max = Math.max(result,max);</span><br><span class="line">                result = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max &gt; result ? max : result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2021/08/18/MySQL-mysqlstudy/"/>
      <url>/2021/08/18/MySQL-mysqlstudy/</url>
      
        <content type="html"><![CDATA[<h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">USE test;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">birthday <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">tel <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">remark <span class="type">VARCHAR</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,&quot;任泓宇&quot;,&quot;男&quot;,&quot;1997-09-22&quot;,&quot;19883047589&quot;,<span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">SHOW</span> tables;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> temp(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">num <span class="type">FLOAT</span>(<span class="number">20</span>,<span class="number">10</span>),</span><br><span class="line">n <span class="type">DECIMAL</span>(<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*DECIMAL保存浮点进度防止数据精度丢失*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加字段*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">ADD</span> address <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">ADD</span> home_tel <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改字段类型和约束*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line">MODIFY home_tel <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改字段名称*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line">CHANGE address home_address <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除字段*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student</span><br><span class="line"><span class="keyword">DROP</span> home_address,</span><br><span class="line"><span class="keyword">DROP</span> home_tel;</span><br><span class="line"><span class="keyword">DESC</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改表名*/</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student RENAME teacher;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*AUTO_INCREMENT 自增； UNIQUE 字段唯一*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_teacher(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">tel <span class="type">CHAR</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line">married <span class="type">BOOLEAN</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">FALSE</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如何创建、添加与删除索引*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_message(</span><br><span class="line">id <span class="type">INT</span> UNSIGNED <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">content <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">type ENUM(&quot;通知&quot;,&quot;公告&quot;,&quot;个人通知&quot;) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">create_time <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">INDEX idx_type (type)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DROP</span> INDEX idx_type <span class="keyword">ON</span> t_message;</span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_type <span class="keyword">ON</span> t_message(type);</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> t_message;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t_message <span class="keyword">ADD</span> INDEX idx_type(type);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*使用列别名*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="keyword">SELECT</span> ename,sal<span class="operator">*</span><span class="number">12</span> <span class="keyword">AS</span> &quot;annual_salary&quot; <span class="keyword">FROM</span> t_emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据分页*/</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename <span class="keyword">FROM</span> t_emp LIMIT <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line"><span class="comment">/*结果集排序*/</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,hiredate,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> ename <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,hiredate,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span>,hiredate <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*去除重复记录*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> job <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="comment">/*DISTINCT关键字只能在SELECT子句中使用一次;使用DISTINCT的SELECT子句中只能查询一列数据，如果查询多列，去除重复记录就会失效。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*条件查询*/</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">10</span> <span class="keyword">AND</span> sal<span class="operator">&gt;=</span><span class="number">2000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,deptno <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> (deptno<span class="operator">=</span><span class="number">10</span> <span class="keyword">OR</span> deptno<span class="operator">=</span><span class="number">20</span>) <span class="keyword">AND</span> sal<span class="operator">&gt;=</span><span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*10部门年收入超过5000的工龄大于20年的员工*/</span></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,hiredate,deptno </span><br><span class="line"><span class="keyword">FROM</span> t_emp </span><br><span class="line"><span class="keyword">WHERE</span> deptno<span class="operator">=</span><span class="number">10</span> <span class="keyword">AND</span> (sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>))<span class="operator">*</span><span class="number">12</span><span class="operator">&gt;=</span><span class="number">5000</span></span><br><span class="line"><span class="keyword">AND</span> DATEDIFF(NOW(),hiredate)<span class="operator">/</span><span class="number">365</span><span class="operator">&gt;=</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> empno,ename,sal,hiredate,deptno</span><br><span class="line"><span class="keyword">FROM</span> t_emp </span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="keyword">IN</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>) <span class="keyword">AND</span> job<span class="operator">!=</span>&quot;SALESMAN&quot;</span><br><span class="line"><span class="keyword">AND</span> hiredate<span class="operator">&lt;</span>&quot;1985-01-01&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*求公司员工的平均月收入是多少*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>)) <span class="keyword">FROM</span> t_emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>)) <span class="keyword">FROM</span> t_emp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(sal) <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> deptno <span class="keyword">IN</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(comm) <span class="keyword">FROM</span> t_emp;</span><br><span class="line"><span class="comment">/*查询10和20部门中，底薪超过2000元并且工龄超过15年的员工人数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> t_emp </span><br><span class="line"><span class="keyword">WHERE</span> deptno <span class="keyword">IN</span>(<span class="number">10</span>,<span class="number">20</span>) <span class="keyword">AND</span> sal<span class="operator">&gt;=</span><span class="number">2000</span></span><br><span class="line"><span class="keyword">AND</span> DATEDIFF(NOW(),hiredate)<span class="operator">/</span><span class="number">365</span><span class="operator">&gt;=</span><span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> deptno,ROUND(<span class="built_in">AVG</span>(sal)) <span class="keyword">FROM</span> t_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno</span><br><span class="line"><span class="comment">/*查询每个部门里，每种职位的人员数量和平均底薪*/</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,job,<span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">AVG</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> t_emp </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno,job </span><br><span class="line"></span><br><span class="line"><span class="comment">/*对分组结果集再次做汇总计算*/</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno,<span class="built_in">COUNT</span>(<span class="operator">*</span>),<span class="built_in">AVG</span>(sal),<span class="built_in">MAX</span>(sal),<span class="built_in">MIN</span>(sal)</span><br><span class="line"><span class="keyword">FROM</span> t_emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查询每个部门中，1982年以后入职的员工超过2个人的部门编号*/</span></span><br><span class="line"><span class="keyword">SELECT</span> deptno </span><br><span class="line"><span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> hiredate<span class="operator">&gt;=</span>&quot;1982-01-01&quot;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> deptno <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*从多张表中提取数据*/</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,d.dname <span class="keyword">FROM</span> t_emp e <span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno<span class="operator">=</span>d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查询每个员工的工号、姓名、部门名称、底薪、职位、工资等级*/</span></span><br><span class="line"><span class="keyword">SELECT</span> e.empno,e.ename,d.deptno,e.sal,e.job,s.grade </span><br><span class="line"><span class="keyword">FROM</span> t_emp e <span class="keyword">JOIN</span> t_dept d <span class="keyword">ON</span> e.deptno<span class="operator">=</span>d.deptno </span><br><span class="line"><span class="keyword">JOIN</span> t_salgrade s <span class="keyword">on</span> e.sal <span class="keyword">BETWEEN</span> s.losal <span class="keyword">AND</span> s.hisal;</span><br><span class="line"><span class="comment">/*内连接的数据表不一定必须有同名字段，只要字段之间符合逻辑关</span></span><br><span class="line"><span class="comment">系就可以*/</span></span><br><span class="line"></span><br><span class="line">#查询与SCOTT相同部门的员工都有谁</span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> deptno<span class="operator">=</span>(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> t_emp <span class="keyword">WHERE</span> ename<span class="operator">=</span>&quot;SCOTT&quot;) <span class="keyword">AND</span> ename<span class="operator">!=</span>&quot;SCOTT&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> e2.ename <span class="keyword">FROM</span> t_emp e1 <span class="keyword">JOIN</span> t_emp e2 <span class="keyword">ON</span> e1.deptno<span class="operator">=</span>e2.deptno <span class="keyword">WHERE</span> e1.ename<span class="operator">=</span>&quot;SCOTT&quot; <span class="keyword">AND</span> e2.ename<span class="operator">!=</span>&quot;SCOTT&quot;;</span><br><span class="line"></span><br><span class="line">#查询月薪超过公司平均月薪的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> e1.ename <span class="keyword">FROM</span> t_emp e1 <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) avg <span class="keyword">FROM</span> t_emp) e2</span><br><span class="line"> <span class="keyword">ON</span> e1.sal <span class="operator">&gt;</span> e2.avg;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_emp </span><br><span class="line"> (empno,ename,job,mgr,hiredate,sal,comm,deptno)</span><br><span class="line"> <span class="keyword">VALUES</span>(<span class="number">8001</span>,&quot;刘娜&quot;,&quot;SALESMAN&quot;,<span class="number">8000</span>,&quot;1998-01-21&quot;,<span class="number">2000</span>,<span class="keyword">NULL</span>,(<span class="keyword">SELECT</span> deptno <span class="keyword">FROM</span> t_dept <span class="keyword">WHERE</span> dname<span class="operator">=</span>&quot;技术部&quot;));</span><br><span class="line"></span><br><span class="line"> #把每个员工的编号和上司的编号<span class="operator">+</span><span class="number">1</span>，用<span class="keyword">ORDER</span> <span class="keyword">BY</span>子句完成</span><br><span class="line"> UPDATE t_emp <span class="keyword">SET</span> empno<span class="operator">=</span>empno<span class="operator">+</span><span class="number">1</span>,mgr<span class="operator">=</span>mgr<span class="operator">+</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> empno <span class="keyword">DESC</span>;</span><br><span class="line"> #把月收入前三名的员工底薪减<span class="number">100</span>元，用LIMIT子句完成</span><br><span class="line"> UPDATE t_emp <span class="keyword">SET</span> sal<span class="operator">=</span>sal<span class="number">-100</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sal<span class="operator">+</span>IFNULL(comm,<span class="number">0</span>) <span class="keyword">DESC</span> LIMIT <span class="number">3</span>;</span><br><span class="line"> #把<span class="number">10</span>部门中，工龄超过<span class="number">20</span>年的员工，底薪增加<span class="number">200</span>元</span><br><span class="line"> UPDATE t_emp <span class="keyword">SET</span> sal<span class="operator">=</span>sal<span class="number">-200</span> <span class="keyword">WHERE</span> DATEDIFF(NOW(),hiredate)<span class="operator">/</span><span class="number">365</span><span class="operator">&gt;</span><span class="number">20</span> <span class="keyword">AND</span> deptno<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"> #把底薪低于公司平均底薪的员工，底薪增加<span class="number">150</span>元</span><br><span class="line"> UPDATE t_emp e <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sal) avg <span class="keyword">FROM</span> t_emp) d <span class="keyword">set</span> e.sal<span class="operator">=</span>e.sal<span class="operator">+</span><span class="number">150</span> <span class="keyword">WHERE</span> e.sal<span class="operator">&lt;=</span>d.avg;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h4><ul><li>数字函数</li></ul><table><thead><tr><th>函数</th><th>功能</th><th>用例</th></tr></thead><tbody><tr><td>ABS</td><td>绝对值</td><td>ABS(-100)</td></tr><tr><td>ROUND</td><td>四舍五入</td><td>ROUND(4.62)</td></tr><tr><td>FLOOR</td><td>强制舍位到最近的整数</td><td>FLOOR(9.9)</td></tr><tr><td>CEIL</td><td>强制进位到最近的整数</td><td>CEIL(3.2)</td></tr><tr><td>POWER</td><td>幂函数</td><td>POWER(2,3)</td></tr><tr><td>LOG</td><td>对数函数</td><td>LOG(7,3)</td></tr><tr><td>LN</td><td>对数函数</td><td>LN(10)</td></tr><tr><td>SQRT 开平方</td><td>SQRT(9)</td><td></td></tr><tr><td>PI</td><td>圆周率</td><td>PI()</td></tr><tr><td>SIN</td><td>三角函数</td><td>SIN(1)</td></tr><tr><td>COS</td><td>三角函数</td><td>COS(1)</td></tr><tr><td>TAN</td><td>三角函数</td><td>TAN(1)</td></tr><tr><td>COT</td><td>三角函数</td><td>COT(1)</td></tr><tr><td>RADIANS</td><td>角度转换弧度</td><td>RADIANS(30)</td></tr><tr><td>DEGREES</td><td>弧度转换角度</td><td>DEGREES(1)</td></tr></tbody></table><h4 id="获取系统时间函数"><a href="#获取系统时间函数" class="headerlink" title="获取系统时间函数"></a>获取系统时间函数</h4><ul><li>NOW()函数能获得系统日期和时间，格式yyyy-MM-dd hh:mm:ss</li><li>CURDATE()函数能获得当前系统日期，格式yyyy-MM-dd</li><li>CURTIME()函数能获得当前系统时间，格式hh:mm:ss<h5 id="日期格式化函数"><a href="#日期格式化函数" class="headerlink" title="日期格式化函数"></a>日期格式化函数</h5></li><li>DATE_FORMAT()函数用于格式化日期，返回用户想要的日期格式<blockquote><p>SELECT ename,DATE_FORMAT(hiredate,”%Y”) FROM t_emp;</p></blockquote></li></ul><table><thead><tr><th>占位符</th><th>作用</th><th>占位符</th><th>作用</th></tr></thead><tbody><tr><td>%Y</td><td>年份</td><td>%m</td><td>月份</td></tr><tr><td>%d</td><td>日期</td><td>%w</td><td>星期(数字)</td></tr><tr><td>%W</td><td>星期(名称)</td><td>%j</td><td>本年第几天</td></tr><tr><td>%U</td><td>本年第几周</td><td>%H</td><td>小时(24)</td></tr><tr><td>%h</td><td>小时(12)</td><td>%i</td><td>分钟</td></tr><tr><td>%s</td><td>秒</td><td>%r</td><td>时间(12)</td></tr><tr><td>%T</td><td>时间(24)</td><td></td><td></td></tr></tbody></table><blockquote><p>#利用日期函数，查询明年你的生日是星期几？<br> SELECT DATE_FORMAT(“2021-09-12”,”%W”);<br> #利用日期函数，查询1981年上半年入职的员工有多少人？<br> SELECT COUNT(*) FROM t_emp WHERE DATE_FORMAT(hiredate,”%Y”)=1981 AND DATE_FORMAT(hiredate,”%m”)&lt;=6;</p></blockquote><ul><li>日期偏移计算<blockquote><p>DATE_ADD()函数可以实现日期的偏移计算，而且时间单位很灵活<br>DATE_ADD( 日期 , INTERVAL 偏移量 时间单位 )<br>SELECT DATE_ADD(NOW(),INTERVAL 15 DAY);<br>SELECT DATE_ADD(NOW(),INTERVAL -300 MINUTE);</p></blockquote></li><li>计算日期之间相隔的天数<blockquote><p>DATEDIFF()函数用来计算两个日期之间相差的天数<br>DATEDIFF ( 日期 , 日期 );</p></blockquote></li></ul><h5 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h5><table><thead><tr><th>函数</th><th>功能</th><th>用例</th></tr></thead><tbody><tr><td>LOWER</td><td>转换小写字符</td><td>LOWER(ename)</td></tr><tr><td>UPPER</td><td>转换大写字符</td><td>UPPER(ename)</td></tr><tr><td>LENGTH</td><td>字符数量</td><td>LENGTH(ename)</td></tr><tr><td>CONCAT</td><td>连接字符串</td><td>CONCAT(sal, “$”)</td></tr><tr><td>INSTR</td><td>字符出现的位置</td><td>INSTR(ename, “A”)</td></tr><tr><td>INSERT</td><td>插入/替换字符</td><td>INSERT(“你好”,1,0,”先生”)</td></tr><tr><td>REPLACE</td><td>替换字符</td><td>REPLACE(“你好先生”,”先生”,”女士”)</td></tr><tr><td>SUBSTR</td><td>截取字符串</td><td>SUBSTR(“你好世界”,3,4)</td></tr><tr><td>SUBSTRING</td><td>截取字符串</td><td>SUBSTRING(“你好世界”,3,2)</td></tr><tr><td>LPAD</td><td>左侧填充字符</td><td>LPAD(“Hello”,10,”*”)</td></tr><tr><td>RPAD</td><td>右侧填充字符</td><td>RPAD(“Hello”,10,”*”)</td></tr><tr><td>TRIM</td><td>去除首尾空格</td><td>TRIM(“ 你好先生 “)</td></tr></tbody></table><h4 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h4><ul><li>事务是一个或者多个SQL语句组成的整体，要么全部执行成功，要<br>么全都执行失败<br><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212638.png"><blockquote><p>默认情况下，MySQL执行每条SQL语句都会自动开启和提交事务,<br>为了让多条SQL语句纳入到一个事务之下，可以手动管理事务<br>START TRANSACTION ;<br>SQL语句<br>[ COMMIT | ROLLBACK ] ;</p></blockquote></li></ul><h5 id="事务的ACID属性"><a href="#事务的ACID属性" class="headerlink" title="事务的ACID属性"></a>事务的ACID属性</h5><ul><li>事务的原子性:一个事务中的所有操作要么全部完成，要么全部失败。事务执行后，不允许停留在中间某个状态。</li><li>事务的一致性:不管在任何给定的时间、并发事务有多少，事务必须保证运行结果的一致性，事务可以并发执行，但是最终MySQL却串行执行。</li><li>隔离性:隔离性要求事务不受其他并发事务的影响，如同在给定的时间内，该事务是数据库唯一运行的事物。</li><li>持久性:事务一旦提交，结果便是永久性的。即便发生宕机，仍然可以依靠<br>事务日志完成数据的持久化。</li></ul><h5 id="事务的四个隔离级别"><a href="#事务的四个隔离级别" class="headerlink" title="事务的四个隔离级别"></a>事务的四个隔离级别</h5><table><thead><tr><th>序号</th><th>隔离级别</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>read uncommitted</td><td>读取未提交数据</td></tr><tr><td>2</td><td>read committed</td><td>读取已提交数据</td></tr><tr><td>3</td><td>repeatable read</td><td>重复读取</td></tr><tr><td>4</td><td>serializable</td><td>序列化</td></tr></tbody></table><h5 id="导出SQL文件"><a href="#导出SQL文件" class="headerlink" title="导出SQL文件"></a>导出SQL文件</h5><ul><li>mysqldump用来把业务数据导出成SQL文件，其中也包括了表结构<blockquote><p>mysqldump -uroot -p [ no-data ] 逻辑库 &gt; 路径</p></blockquote><h5 id="导入SQL文件"><a href="#导入SQL文件" class="headerlink" title="导入SQL文件"></a>导入SQL文件</h5></li><li>source命令用于导入SQL文件，包括创建数据表，写入记录等<blockquote><p>sql &gt; USE demo ;<br>sql &gt; SOURCE backup.sql ;</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Study Start Guide-02</title>
      <link href="/2021/08/18/Spring%20Study%20Start%20Guide-02-springstudystartguide-02/"/>
      <url>/2021/08/18/Spring%20Study%20Start%20Guide-02-springstudystartguide-02/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-学习"><a href="#Spring-学习" class="headerlink" title="Spring 学习"></a>Spring 学习</h3><h4 id="对象依赖注入"><a href="#对象依赖注入" class="headerlink" title="对象依赖注入"></a>对象依赖注入</h4><ul><li>依赖注入是指运行时将容器内对象利用反射赋给其他对象的操作</li><li>基于setter方法注入对象</li><li>基于构造方法注入对象</li></ul><h5 id="基于setter方法注入对象"><a href="#基于setter方法注入对象" class="headerlink" title="基于setter方法注入对象"></a>基于setter方法注入对象</h5><ul><li><p>利用setter实现静态数值注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Ioc容器自动利用反射机制运行时调用setXXX方法为属性赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>利用setter实现对象注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Ioc容器自动利用反射机制运行时调用setXXX方法为属性赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;19.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lily&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Child&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;莉莉&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--利用ref注入依赖对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sweetApple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基于构造方法注入对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sourApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;青苹果&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;绿色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中亚&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;9.8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;andy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Child&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安迪&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sourApple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="注入集合对象"><a href="#注入集合对象" class="headerlink" title="注入集合对象"></a>注入集合对象</h4><ul><li>注入List<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;someList&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>具体值<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;beanId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注入Set<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;someSet&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>具体值<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;beanId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注入Map<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;someMap&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;beanId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>注入Properties<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;someProperties&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k1&quot;</span>&gt;</span>v1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;k2&quot;</span>&gt;</span>v2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h4><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212320.png" alt="截屏20210607 17.14.43.png"></p><h5 id="bean-scope属性"><a href="#bean-scope属性" class="headerlink" title="bean scope属性"></a>bean scope属性</h5><blockquote><p>bean scope属性用于决定对象何时被创建与作用范围<br>bean scope配置将影响容器内对象的数量<br>默认情况下bean会在IoC容器创建后自动实例化,全局唯一</p></blockquote><table><thead><tr><th>scope属性</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>单例(默认值),每一个容器有且只有唯一的实例,实例被全局共享</td></tr><tr><td>prototype</td><td>多例,每次使用时都是创建一个实例</td></tr><tr><td>request</td><td>web环境下,每一次独立请求存在唯一实例</td></tr><tr><td>session</td><td>web环境下,每一个session存在有唯一实例</td></tr><tr><td>application</td><td>web环境下,ServletContext存在唯一实例</td></tr><tr><td>websocket</td><td>每一次WebSocket连接中存在唯一实例</td></tr></tbody></table><p>singleton在容器是单例多线程执行,存在线程安全风险<br>prototype在容器中多实例,占用更多资源,不存在线程安全问题</p><ul><li>singleton与prototype对比</li></ul><table><thead><tr><th>-</th><th>singleton</th><th>prototype</th></tr></thead><tbody><tr><td>对象数量</td><td>全局唯一</td><td>存在多个</td></tr><tr><td>实例化时机</td><td>IoC容器启动时</td><td>getBean()或对象注入时</td></tr><tr><td>线程安全问题</td><td>存在</td><td>不存在</td></tr><tr><td>执行效率</td><td>高</td><td>低</td></tr></tbody></table><blockquote><p>prototype时对象创建与init-method延迟至执行业务<br>代码阶段;<br>prototype时对象不再受IoC容器管理,不会触发<br>destroy-method;<br>延迟加载lazy-init属性可让对象创建与初始化延迟到<br>执行代码阶段.</p></blockquote><blockquote><p>单例才会在容器加载中创建。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Study Start Guide-01</title>
      <link href="/2021/08/18/Spring%20Study%20Start%20Guide-01-springstudystartguide-01/"/>
      <url>/2021/08/18/Spring%20Study%20Start%20Guide-01-springstudystartguide-01/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-知识学习"><a href="#Spring-知识学习" class="headerlink" title="Spring 知识学习"></a>Spring 知识学习</h3><ul><li>IoC控制反转，全称Inverse of Control,是一种设计理念</li><li>由代理人来创建与管理对象,消费者通过代理人来获取对象</li><li>IoC的目的是降低程序与程序之间直接耦合</li><li>IoC是设计理念,是现代程序设计遵循的标准,是宏观目标</li><li>DI(Dependency Injection)是具体技术实现,是微观实现</li><li>DI在Java中利用反射技术实现对象注入(Injection)</li></ul><h4 id="Spring-IoC容器职责"><a href="#Spring-IoC容器职责" class="headerlink" title="Spring IoC容器职责"></a>Spring IoC容器职责</h4><blockquote><p>Spring框架的核心是IoC容器与AOP面向切面编程,是企业开发复杂性的一站式解决方案,Spring IoC负责创建与管理系统对象，并在此基础上扩展功能</p></blockquote><blockquote><p>IoC容器是Spring生态的地基,用于统一创建与管理对象依赖</p></blockquote><ul><li>对象的控制权交由第三方统一管理(IoC控制翻转)</li><li>利用Java反射技术实现运行时对象创建与关联(DI依赖注入)</li><li>基于配置提高应用程序的可维护性与扩展性</li></ul><h4 id="基于XML配置Bean"><a href="#基于XML配置Bean" class="headerlink" title="基于XML配置Bean"></a>基于XML配置Bean</h4><h5 id="XML方式创建IoC容器"><a href="#XML方式创建IoC容器" class="headerlink" title="XML方式创建IoC容器"></a>XML方式创建IoC容器</h5><ul><li>ApplicationContext实现类<ul><li>ClassPathXmlApplicationContext</li><li>AnnotationConfigApplicationContext</li><li>WebApplicationContext</li></ul></li></ul><blockquote><p>//创建IoC容器并根据配置文件创建对象<br>ApplicationContext context = new<br>ClassPathXmlApplicationContext(“classpath:applicationContext.xml”);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;classpath:applicationContext.xml&quot;</span>);</span><br><span class="line">        Apple sweetApple = context.getBean(<span class="string">&quot;sweetApple&quot;</span>, Apple.class);</span><br><span class="line">        System.out.println(sweetApple.getTitle());</span><br><span class="line">        Child lily = context.getBean(<span class="string">&quot;lily&quot;</span>,Child.class);</span><br><span class="line">        lily.eat();</span><br><span class="line">        Child andy = context.getBean(<span class="string">&quot;andy&quot;</span>,Child.class);</span><br><span class="line">        andy.eat();</span><br><span class="line">        Child luna = context.getBean(<span class="string">&quot;luna&quot;</span>,Child.class);</span><br><span class="line">        luna.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//applicationContext.xml</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sourApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;青苹果&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中亚&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;绿色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;softApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;金帅&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;中国&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黄色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;rdApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蛇果&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;美国&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;lily&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Child&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;莉莉&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;softApple&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;andy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Child&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;安迪&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;rdApple&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;luna&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Child&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;露娜&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;apple&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sweetApple&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="实例化Bean的三种方式"><a href="#实例化Bean的三种方式" class="headerlink" title="实例化Bean的三种方式"></a>实例化Bean的三种方式</h4><ul><li>基于构造方法对象实例化<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean标签通过默认构造方法创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;apple1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--利用构造方法参数名实例化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 没有constructor-arg则代表调用默认构造方法实例化 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;origin&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--利用构造方法参数名实例化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sweetApple&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.entity.Apple&quot;</span>&gt;</span> </span><br><span class="line"> <span class="comment">&lt;!-- 利用构造方法参数位置实现对象实例化 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红富士&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;红色&quot;</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;欧洲&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>基于静态工厂实例化<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--利用静态工厂获取对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;apple4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.factory.AppleStaticFactory&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">factory-method</span>=<span class="string">&quot;createSweetApple&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态工厂通过静态方法创建对象，隐藏创建对象的细节</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleStaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Apple <span class="title">createSweetApple</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//logger.info(&quot;&quot;)</span></span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        apple.setTitle(<span class="string">&quot;红富士&quot;</span>);</span><br><span class="line">        apple.setOrigin(<span class="string">&quot;欧洲&quot;</span>);</span><br><span class="line">        apple.setColor(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>基于工厂实例方法实例化<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--利用工厂实例方法获取对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factoryInstance&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.ioc.factory.AppleFactoryInstance&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;apple5&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factoryInstance&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;createSweetApple&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//工厂实例方法创建对象是指Ioc容器对工厂类进行实例化并调用对应的实例方法创建对象的过程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppleFactoryInstance</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Apple <span class="title">createSweetApple</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        apple.setTitle(<span class="string">&quot;红富士&quot;</span>);</span><br><span class="line">        apple.setOrigin(<span class="string">&quot;欧洲&quot;</span>);</span><br><span class="line">        apple.setColor(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> apple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="从IoC容器获取bean"><a href="#从IoC容器获取bean" class="headerlink" title="从IoC容器获取bean"></a>从IoC容器获取bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Apple sweetApple = context.getBean(<span class="string">&quot;sweetApple&quot;</span> , Apple.class);</span><br><span class="line"><span class="comment">//两种方法都可以，推荐使用第一种，避免强制类型转换</span></span><br><span class="line"><span class="comment">//Apple sweetApple = (Apple)context.getBean(&quot;sweetApple&quot;); System.out.println(sweetApple.getTitle());</span></span><br></pre></td></tr></table></figure><h5 id="id与name属性相同点"><a href="#id与name属性相同点" class="headerlink" title="id与name属性相同点"></a>id与name属性相同点</h5><ul><li>bean id与name都是设置对象在IoC容器中唯一标识</li><li>两者在同一个配置文件中都不允许出现重复</li><li>两者允许在多个配置文件中出现重复,新对象覆盖旧对象<h5 id="id与name属性区别"><a href="#id与name属性区别" class="headerlink" title="id与name属性区别"></a>id与name属性区别</h5></li><li>id要求更为严格,一次只能定义一个对象标识(推荐)</li><li>name更为宽松,一次允许定义多个对象标识</li><li>tips: id与name的命名要求有意义,按驼峰命名书写</li></ul><h5 id="路径匹配表达式"><a href="#路径匹配表达式" class="headerlink" title="路径匹配表达式"></a>路径匹配表达式</h5><ul><li>加载单个配置文件<blockquote><p>//创建IoC容器并根据配置文件创建对象<br>ApplicationContext context = new<br>ClassPathXmlApplicationContext(“classpath:applicationContext.xml”);</p></blockquote></li><li>加载多配置文件<blockquote><p>String[] configLocations = new<br>String[]{“classpath:applicationContext.xml”<br>,”classpath:applicationContext-1.xml”};<br>ApplicationContext context = new<br>ClassPathXmlApplicationContext(configLocations);</p></blockquote></li></ul><table><thead><tr><th>表达式实例</th><th>说明</th></tr></thead><tbody><tr><td>classpath:config.xml</td><td>扫描classpath根路径(不包含jar)的config.xml</td></tr><tr><td>classpath:com/imooc/config.xml</td><td>扫描classpath下(不包含jar)com.imooc包中的 config.xml</td></tr><tr><td>classpath*:com/imooc/config.xml</td><td>扫描classpath下(包含jar)com.imooc包中的 config.xml</td></tr><tr><td>classpath:config-*.xml</td><td>扫描classpath根路径下所有以config-开头的XML文 件</td></tr><tr><td>classpath:com/**/config.xml</td><td>扫描com包下(包含任何子包)的config.xml</td></tr><tr><td>file:c:/config.xml</td><td>扫描c盘根路径config.xml</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring study start guide-03</title>
      <link href="/2021/08/18/spring%20study%20start%20guide-03-springstudystartguide-03/"/>
      <url>/2021/08/18/spring%20study%20start%20guide-03-springstudystartguide-03/</url>
      
        <content type="html"><![CDATA[<h3 id="Springz知识学习"><a href="#Springz知识学习" class="headerlink" title="Springz知识学习"></a>Springz知识学习</h3><h5 id="基于注解的优势"><a href="#基于注解的优势" class="headerlink" title="基于注解的优势"></a>基于注解的优势</h5><ul><li>摆脱繁琐的XML形式的bean与依赖注入配置</li><li>基于”声明式”的原则,更适合轻量级的现代企业应用</li><li>让代码可读性变得更好,研发人员拥有更好的开发体验</li></ul><h6 id="三类注解"><a href="#三类注解" class="headerlink" title="三类注解"></a>三类注解</h6><ul><li>组件类型注解-声明当前类的功能与职责</li><li>自动装配注解-根据属性特征自动注入对象</li><li>元数据注解-更细化的辅助IoC容器管理对象的注解</li></ul><h5 id="四种组件类型注解"><a href="#四种组件类型注解" class="headerlink" title="四种组件类型注解"></a>四种组件类型注解</h5><ul><li>@Component 组件注解,通用注解,被该注解描述的类将被IoC容器管理并实例化</li><li>@Controller 语义注解,说明当前类是MVC应用中的控制器类</li><li>@Service 语义注解,说明当前类是Service业务服务类</li><li>@Repository 语义注解,说明当前类用于业务持久层,通常描述对应Dao类</li></ul><h5 id="开启组件扫描"><a href="#开启组件扫描" class="headerlink" title="开启组件扫描"></a>开启组件扫描</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通知Spring IOC容器初始化时加载属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:config.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在IOC容器初始化是自动扫描四种组件类型注解并完成实例化</span></span><br><span class="line"><span class="comment">        @Repository</span></span><br><span class="line"><span class="comment">        @Service</span></span><br><span class="line"><span class="comment">        @Controller</span></span><br><span class="line"><span class="comment">        @Component</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.imooc&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>//@Autowired<br>//spring Ioc容器会自动通过反射技术将属性private修饰符自动改为public，直接进行赋值<br>//不再执行set方法<br>    @Autowired<br>    private IUserDao udao;<br>    public IUserDao getUdao() {<br>        return udao;<br>    }<br>//    @Autowired<br>//    //如果装配注解放在set方法上，则自动按类型/名称对set方法参数进行注入<br>//    public void setUdao(UserDao udao) {<br>//        System.out.println(“setUdao:” + udao);<br>//        this.udao = udao;<br>//    }<br>/**<br>     * 1.@Resource设置name属性，则按name在IOC容器中将bean注入<br>     * 2.@Resource未设置name属性<br>     * 2.1以属性名作为bean name在IOC容器中匹配bean，如有匹配则注入<br>     * 2.2按属性名未匹配，则按类型进行匹配，同时@Autowired，需加入@Primary解决类型冲突<br>     * 使用建议：在使用@Resource对象时推荐设置name或保证属性名与bean名称一致<br>        */<br>      <img src="1" alt="截屏20210607 19.25.54.png"><br>      <img src="http://1.15.34.179:8090/upload/2021/06/%E6%88%AA%E5%B1%8F2021-06-07%2019.26.01-dbd9b2abb9344cd383ff5c3cbf3652d0.png" alt="截屏20210607 19.26.01.png"></p></blockquote><h5 id="基于Java-Config的优势"><a href="#基于Java-Config的优势" class="headerlink" title="基于Java Config的优势"></a>基于Java Config的优势</h5><ul><li>完全摆脱XML的束缚,使用独立Java类管理对象与依赖</li><li>注解配置相对分散,利用Java Config可对配置集中管理</li><li>可以在编译时进行依赖检查,不容易出错</li></ul><h6 id="Java-Config核心注解"><a href="#Java-Config核心注解" class="headerlink" title="Java Config核心注解"></a>Java Config核心注解</h6><blockquote><p>@Configuration 描述类,说明当前类是Java Config配置类,完全替代XML文件<br>@Bean 描述方法,方法返回对象将被IoC容器管理,beanId默认为方法名 @ImportResource 描述类,加载静态文件,可使用@Value注解获取 @ComponentScan 描述类,同XML的&lt;<a href="context:compoment-scan">context:compoment-scan</a>&gt;标签</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//当前类是一个配置类，用于替代applicatonContext.xml</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.imooc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//Java Confug利用方法创建对象，将方法返回对象放入容器，beanId=方法名</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">userDao</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UserDao userDao = <span class="keyword">new</span> UserDao();</span><br><span class="line">        System.out.println(<span class="string">&quot;已创建&quot;</span> + userDao);</span><br><span class="line">        <span class="keyword">return</span> userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//先按name尝试注入，name不存在则按类型注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserService <span class="title">userService</span><span class="params">(UserDao userDao,EmployeeDao employeeDao)</span></span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService();</span><br><span class="line">        System.out.println(<span class="string">&quot;已创建&quot;</span> + userService);</span><br><span class="line">        userService.setUserDao(userDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用setUserDao&quot;</span> + userDao);</span><br><span class="line">        userService.setEmployeeDao(employeeDao);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用setEmployeeDao&quot;</span> + employeeDao);</span><br><span class="line">        <span class="keyword">return</span> userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope(&quot;prototype&quot;)</span> <span class="comment">//初始化时不再创建UserController对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserController <span class="title">userController</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line">        UserController userController = <span class="keyword">new</span> UserController();</span><br><span class="line">        System.out.println(<span class="string">&quot;已创建&quot;</span> + userController);</span><br><span class="line">        userController.setUserService(userService);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用setUserService&quot;</span> + userService);</span><br><span class="line">        <span class="keyword">return</span> userController;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>//基于Java Config配置IOC容器的初始化<br>ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将Junit4的执行权交由Spring Test,在测试用例执行前自动初始化IoC容器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &#123;&quot;classpath:applicationContext.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTestor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.createUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring study start guide-04</title>
      <link href="/2021/08/18/spring%20study%20start%20guide-04-springstudystartguide-04/"/>
      <url>/2021/08/18/spring%20study%20start%20guide-04-springstudystartguide-04/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring知识学习-AOP"><a href="#Spring知识学习-AOP" class="headerlink" title="Spring知识学习-AOP"></a>Spring知识学习-AOP</h4><h5 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h5><ul><li>Spring AOP - Aspect Oriented Programming 面向切面编程</li><li>AOP的做法是将通用、与业务无关的功能抽象封装为切面类</li><li>切面可配置在目标方法的执行前、后运行，真正做到即插即用</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>Aspect</td><td>切面,具体的可插拔组件功能类,通常一个切面只实现一个通用功能</td></tr><tr><td>Target Class/Method</td><td>目标类、目标方法,指真正要执行与业务相关的方法</td></tr><tr><td>PointCut</td><td>切入点,使用execution表达式说明切面要作用在系统的哪些类上</td></tr><tr><td>JoinPoint</td><td>连接点,切面运行过程中是包含了目标类/方法元数据的对象</td></tr><tr><td>Advice</td><td>通知,说明具体的切面的执行时机,Spring包含了五种不同类型通知</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//joinPoint三种常用的方法</span></span><br><span class="line"> String className = joinPoint.getTarget().getClass().getName();<span class="comment">//获取目标类的名称</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();<span class="comment">//获取目标方法名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName);</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212446.png" alt="截屏20210607 23.56.09.png">)</p><ul><li>五种通知类型</li></ul><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>Before Advice</td><td>执行前通知,目标方法运行前执行</td></tr><tr><td>After Returning Advice</td><td>返回后通知,目标方法返回数据后执行</td></tr><tr><td>After Throwing Advice</td><td>异常通知,目标方法抛出异常后执行</td></tr><tr><td>After Advice</td><td>最后(最终)通知,目标方法运行后执行</td></tr><tr><td>Around Advice</td><td>最强大通知,自定义通知执行时机,可决定目标方法是否运行</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;methodAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.aspect.MethodAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- PointCut 切点,使用execution表达式描述切面的作用范围 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- execution(public * com.imooc..*.*(..)) 说明切面作用在com.imooc包下的所有类的所有方法上 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(public * com.imooc..*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只对所有Service类生效--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.imooc..*Service.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--只对所有返回值为String类型方法生效--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(String com.imooc..*Service.*(..))&quot;&gt;&lt;/aop:pointcut&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对方法名进行约束 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.imooc..*Service.create*(..))&quot;&gt;&lt;/aop:pointcut&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对参数进行约束 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.imooc..*Service.*(String,*))&quot;&gt;&lt;/aop:pointcut&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义切面类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;methodAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- before通知(Advice),代表在目标方法运行前先执行methodAspect.printExecutionTime() --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printExecutionTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;doAfterReturning&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;ret&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;doAfterThrowing&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;th&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;doAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//切面方法,用于扩展额外功能</span></span><br><span class="line">    <span class="comment">//JoinPoint 连接点,通过连接点可以获取目标类/方法的信</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExecutionTime</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">        String className = joinPoint.getTarget().getClass().getName();<span class="comment">//获取目标类的名称</span></span><br><span class="line">        String methodName = joinPoint.getSignature().getName();<span class="comment">//获取目标方法名称</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName);</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        System.out.println(<span class="string">&quot;----&gt;参数个数:&quot;</span> + args.length);</span><br><span class="line">        <span class="keyword">for</span>(Object arg:args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----&gt;参数:&quot;</span> + arg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint,Object ret)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;----返回后通知:&quot;</span> + ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint,Throwable th)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;----异常通知:&quot;</span> + th.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;----触发后置通知&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodChecker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ProceedingJoinPoint是JoinPoint的升级版,在原有功能外,还可以控制目标方法是否执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">check</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            Object ret = pjp.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">            <span class="keyword">long</span> endTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            <span class="keyword">long</span> duration = endTime - startTime;</span><br><span class="line">            <span class="keyword">if</span>(duration &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">                String className = pjp.getTarget().getClass().getName();</span><br><span class="line">                String methodName = pjp.getSignature().getName();</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">                String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">                System.out.println(<span class="string">&quot;=======&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;(&quot;</span> + duration + <span class="string">&quot;ms)======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception message:&quot;</span> + throwable.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.dao.UserDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employeeDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.dao.EmployeeDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.service.UserService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employeeService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.service.EmployeeService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;employeeDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;employeeDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;methodChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.spring.aop.aspect.MethodChecker&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.imooc..*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;methodChecker&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;check&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Spring-AOP与AspectJ的关系"><a href="#Spring-AOP与AspectJ的关系" class="headerlink" title="Spring AOP与AspectJ的关系"></a>Spring AOP与AspectJ的关系</h5><ul><li>Eclipse AspectJ,一种基于Java平台的面向切面编程的语言</li><li>Spring AOP使用了AspectJ切入点匹配功能</li><li>Spring AOP利用代理技术实现对象运行时功能扩展</li></ul><h4 id="Spring-AOP实现原理"><a href="#Spring-AOP实现原理" class="headerlink" title="Spring AOP实现原理"></a>Spring AOP实现原理</h4><ul><li>Spring基于代理类实现功能动态扩展,包含两种形式:</li><li>目标类拥有接口,通过JDK动态代理实现功能扩展</li><li>目标类没有接口,通过CGLib组件实现功能扩展<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--初始化IoC容器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.imooc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用Spring AOP注解模式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//标记当前类为组</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//说明当前类是切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodChecker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知,参数为PointCut切点表达</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.imooc..*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="comment">//ProceedingJoinPoint是JoinPoint的升级版,在原有功能外,还可以控制目标方法是否执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">check</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> startTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            Object ret = pjp.proceed();<span class="comment">//执行目标方法</span></span><br><span class="line">            <span class="keyword">long</span> endTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">            <span class="keyword">long</span> duration = endTime - startTime; <span class="comment">//执行时长</span></span><br><span class="line">            <span class="keyword">if</span>(duration &gt;= <span class="number">1000</span>)&#123;</span><br><span class="line">                String className = pjp.getTarget().getClass().getName();</span><br><span class="line">                String methodName = pjp.getSignature().getName();</span><br><span class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">                String now = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">                System.out.println(<span class="string">&quot;=======&quot;</span> + now + <span class="string">&quot;:&quot;</span> + className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;(&quot;</span> + duration + <span class="string">&quot;ms)======&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Exception message:&quot;</span> + throwable.getMessage());</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态代理是指必须手动创建代理类的代理模式使用方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//持有委托类的对象</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>).format(<span class="keyword">new</span> Date()) +<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        userService.createUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceProxy1</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserService userService ;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceProxy1</span><span class="params">(UserService userService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.createUser();</span><br><span class="line">        System.out.println(<span class="string">&quot;========后置扩展功能======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceProxy1(<span class="keyword">new</span> UserServiceProxy(<span class="keyword">new</span> UserServiceImpl()));</span><br><span class="line">        userService.createUser();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * InvocationHandler是JDK提供的反射类,用于在JDK动态代理中对目标方法进行增强</span></span><br><span class="line"><span class="comment"> * InvocationHandler实现类与切面类的环绕通知类似</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandier</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ProxyInvocationHandier</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在invoke()方法对目标方法进行增强</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理类对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 目标方法实参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目标方法运行后返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 目标方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====&quot;</span> + <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>).format(<span class="keyword">new</span> Date()) +<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Object ret = method.invoke(target, args);<span class="comment">//调用目标方法,ProceedingJoinPoint.proceed()</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> ProxyInvocationHandier(userService);</span><br><span class="line">        <span class="comment">//动态创建代理类</span></span><br><span class="line">        UserService userServiceProxy = (UserService) Proxy.newProxyInstance(userService.getClass().getClassLoader(),</span><br><span class="line">                userService.getClass().getInterfaces(),invocationHandler);</span><br><span class="line">        userServiceProxy.createUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//动态代理,必须实现接口才可以运行</span></span><br><span class="line">        EmployeeService employeeService = <span class="keyword">new</span> EmployeeServiceImpl();</span><br><span class="line">        EmployeeService employeeServiceProxy = (EmployeeService) Proxy.newProxyInstance(employeeService.getClass().getClassLoader(),</span><br><span class="line">                employeeService.getClass().getInterfaces(),invocationHandler);</span><br><span class="line">        employeeService.createEmployee();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CGLib实现代理类"><a href="#CGLib实现代理类" class="headerlink" title="CGLib实现代理类"></a>CGLib实现代理类</h5><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212541.png"></p><ul><li>CGLib是运行时字节码增强技术</li><li>Spring AOP扩展无接口类使用CGLib</li><li>AOP会运行时生成目标继承类字节码的方式进行行为扩展<blockquote><p>CGLib执行过程<br>生成代理类的二进制字节码文件<br>加载二进制字节码，生成Class对象(Class.forName())<br>通过反射机制获得实例构造，并创建代理类对象</p></blockquote></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>如果目标类实现了接口Spring优先选择JDK动态代理实现目标类的代理实现功能扩展；<br>如果目标类没有实现了接口，Spring则自动使用CGLib实现代理类通过继承的方式对目标类的实现功能扩展；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring study start guide-05</title>
      <link href="/2021/08/18/spring%20study%20start%20guide-05-springstudystartguide-05/"/>
      <url>/2021/08/18/spring%20study%20start%20guide-05-springstudystartguide-05/</url>
      
        <content type="html"><![CDATA[<h4 id="Spring-MVC-Start-Guide"><a href="#Spring-MVC-Start-Guide" class="headerlink" title="Spring MVC Start Guide"></a>Spring MVC Start Guide</h4><h5 id="MVC介绍"><a href="#MVC介绍" class="headerlink" title="MVC介绍"></a>MVC介绍</h5><ul><li>View &lt;-&gt; Controller &lt;-&gt; Model<h5 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h5></li><li>Spring MVC是Spring体系的轻量级Web MVC框架</li><li>Spring MVC的核心Controller控制器,用于处理请求,产生响应</li><li>Spring MVC基于Spring IOC容器运行,所有对象被IOC管理</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--DispatchServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          DispatcherServlet是Spring MVC最核心的对象</span></span><br><span class="line"><span class="comment">          DispatcherServlet用于拦截Http请求,</span></span><br><span class="line"><span class="comment">          并根据请求的URL调用与之对应的Controller方法,来完成Http请求的处理</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--applicationContext.xml--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    在Web应用启动时自动创建Spring IOC容器,</span></span><br><span class="line"><span class="comment">                    并初始化DispatcherServlet</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>0<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&quot;/&quot; 代表拦截所有请求--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:mv</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    context:component-scan 标签作用</span></span><br><span class="line"><span class="comment">    在Spring IOC初始化过程中,自动创建并管理com.imooc.springmvc及子包中</span></span><br><span class="line"><span class="comment">    拥有以下注解的对象.</span></span><br><span class="line"><span class="comment">    @Repository</span></span><br><span class="line"><span class="comment">    @Service</span></span><br><span class="line"><span class="comment">    @Controller</span></span><br><span class="line"><span class="comment">    @Component</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.imooc.springmvc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启用Spring MVC的注解开发模式--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- response.setContentType(&quot;text/html;charset=utf-8&quot;) --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将图片/JS/CSS等静态资源排除在外,可提高执行效率 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.format.support.FormattingConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.imooc.springmvc.converter.MyDateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.ftl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;freemarkerConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateLoaderPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/ftl&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;freemarkerSettings&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Controller方法参数接收数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/m1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;password&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">-------------------------------------------------------------- <span class="meta">@PostMapping(&quot;/m1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(String username , Long password)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> username + <span class="string">&quot;:&quot;</span> + password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用Java Bean接收数据<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/m1&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">&lt;input name=<span class="string">&quot;password&quot;</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">----------------------------------------------------------------- <span class="meta">@PostMapping(&quot;/m1&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line"> <span class="keyword">return</span> user.getUsername() + <span class="string">&quot;:&quot;</span> + user.getPassword();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>利用数组或者List接收请求中的复合数据<br>利用@RequestParam为参数设置默认值<br>使用Map对象接收请求参数及注意事项(不能接受复合型的数据)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Controller</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormController</span> </span>&#123;</span><br><span class="line"><span class="comment">//    @PostMapping(&quot;/apply&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(<span class="meta">@RequestParam(value = &quot;n&quot;,defaultValue = &quot;ANON&quot;)</span> String name, String course, Integer[] purpose)</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(course);</span><br><span class="line">        <span class="keyword">for</span> (Integer p : purpose) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @PostMapping(&quot;/apply&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(String name, String course, <span class="meta">@RequestParam</span> List&lt;Integer&gt; purpose)</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(course);</span><br><span class="line">        <span class="keyword">for</span> (Integer p : purpose) &#123;</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @PostMapping(&quot;/apply&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Form form)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/apply&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(<span class="meta">@RequestParam</span> Map map)</span></span>&#123;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>即Map无法接受复选框的多选项<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;course&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 150px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;h5&quot;</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;python&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;php&quot;</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>您的学习目的：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;purpose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>就业找工作</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;purpose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>工作要求</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;purpose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>兴趣爱好</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;purpose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>其他</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="关联对象赋值"><a href="#关联对象赋值" class="headerlink" title="关联对象赋值"></a>关联对象赋值</h5></li><li>复杂内容表单<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">-------------------------------------- 姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">身份证号:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;idno&quot;</span>&gt;</span></span><br><span class="line">过期时间:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;expire&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>面向对象设计<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String username;</span><br><span class="line"> <span class="keyword">private</span> String password;</span><br><span class="line"> <span class="keyword">private</span> IDcard idcard = <span class="keyword">new</span> IDCard();</span><br><span class="line"> <span class="comment">//getter and setter ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDcard</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="keyword">private</span> String idno;</span><br><span class="line"> <span class="keyword">private</span> Date expire;</span><br><span class="line"> <span class="comment">//getter and setter ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>复杂内容表单<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">------------------------------------------- 姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;idcard.name&quot;</span>&gt;</span></span><br><span class="line">身份证:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;idcard.idno&quot;</span>&gt;</span></span><br><span class="line">过期时间:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;idcard.expire&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="中文乱码的配置"><a href="#中文乱码的配置" class="headerlink" title="中文乱码的配置"></a>中文乱码的配置</h5><ul><li>Get请求乱码 - server.xml增加URIEncoding属性<blockquote><p>Temcat8.0之后默认是UTF-8</p></blockquote></li><li>Post请求乱码 - web.xml配置CharacterEncodingFilter<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>Response响应乱码 - Spring配置StringHttpMessageConverter<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    &lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;conversionService&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- response.setContentType(&quot;text/html;charset=utf-8&quot;) --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将图片/JS/CSS等静态资源排除在外,可提高执行效率 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h6 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h6></li><li>@ResponseBody直接产生响应体的数据,过程不涉及任何视图</li><li>@ResponseBody可产生标准字符串/JSON/XML等格式数据</li><li>@ResponseBody被StringHttpMessageConverter所影响<h6 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h6></li><li>ModelAndView对象是指”模型(数据)与视图(界面)”对象</li><li>通过ModelAndView可将包含数据对象与模板引擎进行绑定</li><li>SpringMVC中默认的View是JSP,也可以配置其他模板引擎</li></ul><h6 id="ModelAndView的使用"><a href="#ModelAndView的使用" class="headerlink" title="ModelAndView的使用"></a>ModelAndView的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/view&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showView</span><span class="params">(Integer userId)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建对象 ModelAndView mav = new ModelAndView(&quot;/index.jsp&quot;);</span></span><br><span class="line"><span class="comment">//        ModelAndView mav = new ModelAndView(&quot;redirect:/view.jsp&quot;);</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;/um/view.jsp&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">if</span>(userId == <span class="number">1</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lily&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">2</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">3</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lina&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mav.addObject(<span class="string">&quot;u&quot;</span> , user);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>JSP提取模型数据<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;I<span class="string">&#x27;m view page&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;hr&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;Username:$&#123;u.username&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>ModelAndView<br>mav.addObject()方法设置的属性默认存放在当前请求中<br>默认ModelAndView使用请求转发(forward)至页面<br>重定向使用 new ModelAndView(“redirect:/index.jsp”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/view&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">showView</span><span class="params">(Integer userId)</span></span>&#123;</span><br><span class="line"><span class="comment">//        ModelAndView mav = new ModelAndView(&quot;redirect:/view.jsp&quot;);</span></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;/um/view.jsp&quot;</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">if</span>(userId == <span class="number">1</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lily&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">2</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">3</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lina&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mav.addObject(<span class="string">&quot;u&quot;</span> , user);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String与ModelMap</span></span><br><span class="line">    <span class="comment">//Controller方法返回String的情况</span></span><br><span class="line">    <span class="comment">//1. 方法被@ResponseBody描述，SpringMVC直接响应String字符串本身</span></span><br><span class="line">    <span class="comment">//2. 方法不存在@ResponseBody，则SpringMVC处理String指代的视图（页面）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/xxxx&quot;)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">showView1</span><span class="params">(Integer userId , ModelMap modelMap)</span></span>&#123;</span><br><span class="line">        String view = <span class="string">&quot;/um/view.jsp&quot;</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        <span class="keyword">if</span>(userId == <span class="number">1</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lily&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">2</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;smith&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId == <span class="number">3</span>)&#123;</span><br><span class="line">            user.setUsername(<span class="string">&quot;lina&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;u&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="SpringMVC整合Freemarker"><a href="#SpringMVC整合Freemarker" class="headerlink" title="SpringMVC整合Freemarker"></a>SpringMVC整合Freemarker</h5></li><li>pom.xml引入依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>启用Freemarker模板引擎<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置响应输出，并解决中文乱码 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;contentType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定Freemarker模板文件扩展名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.ftl&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置Freemarker参数<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;freemarkerConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置模板保存的目录--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateLoaderPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/ftl&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--其他模板引擎设置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;freemarkerSettings&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置Freemarker脚本与数据渲染时使用的字符集--&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;defaultEncoding&quot;</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>spring study start guide-06</title>
      <link href="/2021/08/18/spring%20study%20start%20guide-06-springstudystartguide-06/"/>
      <url>/2021/08/18/spring%20study%20start%20guide-06-springstudystartguide-06/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot-Start-Guide"><a href="#SpringBoot-Start-Guide" class="headerlink" title="SpringBoot Start Guide"></a>SpringBoot Start Guide</h3><h4 id="Spring-Boot简介"><a href="#Spring-Boot简介" class="headerlink" title="Spring Boot简介"></a>Spring Boot简介</h4><blockquote><p>简化初始搭建以及开发过程,不再需要定义样板化的配置,快速应用开发领域”天下武功，唯快不破”。</p></blockquote><ul><li><p>Spring 、Spring MVC和Spring Boot</p><ul><li>Spring 最初利用 IOC和AOP 解耦</li><li>按照这种模式搞了MVC 框架</li><li>写很多样板代码很麻烦，就有了Spring Boot</li><li>Spring Cloud是在Spring Boot基础上诞生的</li></ul></li><li><p>Spring Boot核心特点</p><ul><li>开箱即用</li><li>约定优于配置</li></ul></li><li><p>约定优于配置</p><ul><li><p>properties<br>environments.dev.url=<a href="http://imooc.com/">http://imooc.com</a><br>environments.dev.name=Developer</p></li><li><p>yml：分层级，冒号后需要空格</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environments:</span></span><br><span class="line"><span class="attr">dev:</span></span><br><span class="line"> <span class="attr">url:</span> <span class="string">http://imooc.com</span></span><br><span class="line"> <span class="attr">name:</span> <span class="string">Developer</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置自定义属性</p><blockquote><p>单个配置：@Value<br>配置类：@ConfigurationProperties</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>运算符与进制转换</title>
      <link href="/2021/08/18/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-2021-05-24-08-53-52/"/>
      <url>/2021/08/18/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2-2021-05-24-08-53-52/</url>
      
        <content type="html"><![CDATA[<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><blockquote><p>四种不同的表示方式<br>    二进制：0，1，满2进1，以0b或者0B开头。<br>    十进制：0-9 ，满10进1。<br>    八进制：0-7 ，满8进1. 以数字0开头表示。<br>    十六进制：0-9及A(10)-F(15)，满16进1. 以0x或0X开头表示。此处的A-F不区分大小写。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n1 = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">int</span> n2 = <span class="number">1010</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">int</span> n3 = <span class="number">01010</span>;<span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">int</span> n4 = <span class="number">0x10101</span>;<span class="comment">//十六进制</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>十进制</th><th>十六进制</th><th>八进制</th><th>二进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td><td>2</td><td>10</td></tr><tr><td>3</td><td>3</td><td>3</td><td>11</td></tr><tr><td>4</td><td>4</td><td>4</td><td>100</td></tr><tr><td>5</td><td>5</td><td>5</td><td>101</td></tr><tr><td>6</td><td>6</td><td>6</td><td>110</td></tr><tr><td>7</td><td>7</td><td>7</td><td>111</td></tr><tr><td>8</td><td>8</td><td>10</td><td>1000</td></tr><tr><td>9</td><td>9</td><td>11</td><td>1001</td></tr><tr><td>10</td><td>A</td><td>12</td><td>1010</td></tr><tr><td>11</td><td>B</td><td>13</td><td>1011</td></tr><tr><td>12</td><td>C</td><td>14</td><td>1100</td></tr><tr><td>13</td><td>D</td><td>15</td><td>1101</td></tr><tr><td>14</td><td>E</td><td>16</td><td>1110</td></tr><tr><td>15</td><td>F</td><td>17</td><td>1111</td></tr><tr><td>16</td><td>10</td><td>20</td><td>10000</td></tr><tr><td>17</td><td>11</td><td>21</td><td>10001</td></tr></tbody></table><h3 id="进制转换-1"><a href="#进制转换-1" class="headerlink" title="进制转换"></a>进制转换</h3><ul><li><p>第一组</p><ul><li>二进制转十进制<blockquote><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以2的         </p></blockquote></li></ul><p>   (位数-1)次方，然后求和。<br>   案例：<code>0b1011 = 1 * 2 ^ (1-1) + 1 * 2 ^ (2-1) + 0 * 2 ^ (3-1) + 1 * 2 ^ (4-1) = 1 + 2 + 0 + 8 = 11</code></p><ul><li>八进制转十进制<blockquote><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以8的<br>(位数-1)次方，然后求和。<br>案例：<code>0234 = 4 * 8 ^ (1-1) + 3 * 8 ^ (2-1) + 2 * 8 ^ (3-1) = 4 + 24 + 128 = 156</code></p></blockquote></li><li>十六进制转十进制<blockquote><p>规则：从最低位(右边)开始，将每个位上的数提取出来，乘以16的<br>(位数-1)次方，然后求和。<br>案例：<code>0x23A = 10 * 16 ^ (1-1) + 3 * 16 ^ (2-1) + 2 *              16 ^ (3-1) = 10 + 48 + 512 = 570</code></p></blockquote></li></ul></li><li><p>第二组</p><ul><li><p>十进制转二进制</p><blockquote><p>规则：将该数不断除以2，直到商为0为止，然后将每步得到的余数倒过来，就是对应的二进制。<br>案例：<code>34 = 0B00100010</code></p></blockquote></li><li><p>十进制转八进制</p><blockquote><p>规则：将该数不断除以8，直到商为0为止，然后将每步得到的余数倒过来，就是对应的八进制。<br>案例：<code>131 = 0203</code></p></blockquote></li><li><p>十进制转十六进制</p><blockquote><p>规则：将该数不断除以16，直到商为0为止，然后将每步得到的余数倒过来，就是对应的十六进制。<br>案例：<code>237 = 0xED</code>    </p></blockquote></li></ul></li><li><p>第三组</p><ul><li><p>二进制转八进制</p><blockquote><p>规则：从低位开始,将二进制数每三位一组，转成对应的八进制数即可。<br>案例：<code>0b11010101 = 0325</code></p></blockquote></li><li><p>二进制转十六进制</p><blockquote><p>规则：从低位开始,将二进制数每四位一组，转成对应的十六进制数即可。<br>案例：<code>0b11010101 = 0xD5</code></p></blockquote></li></ul></li><li><p>第四组</p><ul><li><p>八进制转二进制</p><blockquote><p>规则：将八进制数每1位，转成对应的一个3位的二进制数即可。<br>案例：<code>0237 = 0b010011111</code></p></blockquote></li><li><p>十六进制转二进制</p><blockquote><p>规则：将十六进制数每1位，转成对应的一个4位的二进制数即可。<br>案例：<code>0x23B = 0b001000111011</code></p></blockquote></li></ul></li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="二进制在运算中的说明"><a href="#二进制在运算中的说明" class="headerlink" title="二进制在运算中的说明"></a>二进制在运算中的说明</h3><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212745.png"></p><h3 id="原码，反码，补码（重点、难点）"><a href="#原码，反码，补码（重点、难点）" class="headerlink" title="原码，反码，补码（重点、难点）"></a>原码，反码，补码（重点、难点）</h3><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212815.png"></p><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20211109212833.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line">        <span class="keyword">int</span> n2 = <span class="number">1010</span>;<span class="comment">//十进制</span></span><br><span class="line">        <span class="keyword">int</span> n3 = <span class="number">01010</span>;<span class="comment">//八进制</span></span><br><span class="line">        <span class="keyword">int</span> n4 = <span class="number">0x10101</span>;<span class="comment">//十六进制</span></span><br><span class="line">        System.out.println(<span class="string">&quot;n1=&quot;</span> + n1);</span><br><span class="line">        System.out.println(<span class="string">&quot;n2=&quot;</span> + n2);</span><br><span class="line">        System.out.println(<span class="string">&quot;n3=&quot;</span> + n3);</span><br><span class="line">        System.out.println(<span class="string">&quot;n4=&quot;</span> + n4);</span><br><span class="line">        System.out.println(<span class="number">0x23A</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a=<span class="number">1</span>&gt;&gt;<span class="number">2</span>; <span class="comment">// 1 向右位移 2 位</span></span><br><span class="line">        <span class="keyword">int</span> b=-<span class="number">1</span>&gt;&gt;<span class="number">2</span>;<span class="comment">//算术右移</span></span><br><span class="line">        <span class="keyword">int</span> c=<span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//算术左移</span></span><br><span class="line">        <span class="keyword">int</span> d=-<span class="number">1</span>&lt;&lt;<span class="number">2</span>;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">int</span> e=<span class="number">3</span>&gt;&gt;&gt;<span class="number">2</span>;<span class="comment">//无符号右移 //a,b,c,d,e 结果是多少</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;c=&quot;</span>+c);</span><br><span class="line">        System.out.println(<span class="string">&quot;d=&quot;</span>+d);</span><br><span class="line">        System.out.println(<span class="string">&quot;e=&quot;</span>+e);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先得到2的补码 =&gt;2的原码 00000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//2的补码 00000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//3的补码，3的原码 00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="comment">//按位&amp;</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00000011</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00000010 &amp; 运算后的补码</span></span><br><span class="line">        <span class="comment">//00000000 00000000 00000000 00000010 运算后的原码</span></span><br><span class="line">        <span class="comment">//结果:2</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&amp;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//推导</span></span><br><span class="line">        <span class="comment">//先得到-2的原码 10000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//-2的反码 11111111 11111111 11111111 11111101</span></span><br><span class="line">        <span class="comment">//-2的补码 11111111 11111111 11111111 11111110</span></span><br><span class="line">        <span class="comment">//~-2操作  00000000 00000000 00000000 00000001 运算后的补码</span></span><br><span class="line">        <span class="comment">// 00000000 00000000 00000000 00000001 运算后的愿码</span></span><br><span class="line">        System.out.println(~-<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先得到2的补码 =&gt;2的原码 00000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//2的补码 00000000 00000000 00000000 00000010</span></span><br><span class="line">        <span class="comment">//~2操作 11111111 11111111 11111111 11111101 运算后的补码</span></span><br><span class="line">        <span class="comment">// 11111111 11111111 11111111 11111100 运算后的反码</span></span><br><span class="line">        <span class="comment">//10000000 00000000 00000000 00000011 运算后的原码</span></span><br><span class="line">        <span class="comment">//结果:-3</span></span><br><span class="line">        System.out.println(~<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="还有-3-个位运算符-gt-gt-、-lt-lt-和-gt-gt-gt-运算规则"><a href="#还有-3-个位运算符-gt-gt-、-lt-lt-和-gt-gt-gt-运算规则" class="headerlink" title="还有 3 个位运算符 &gt;&gt;、&lt;&lt; 和 &gt;&gt;&gt; , 运算规则:"></a>还有 3 个位运算符 &gt;&gt;、&lt;&lt; 和 &gt;&gt;&gt; , 运算规则:</h4><blockquote><p>算术右移 &gt;&gt;：低位溢出,符号位不变,并用符号位补溢出的高位<br>  算术左移 &lt;&lt;: 符号位不变,低位补0<br>  ‘&gt;&gt;&gt;’ 逻辑右移也叫无符号右移,运算规则是: 低位溢出，高位补0<br>  特别说明：没有 &lt;&lt;&lt; 符号<br>int a=1&gt;&gt;2; //1 =&gt; 00000001 =&gt; 00000000 本质 1 / 2 / 2 =0 int c=1&lt;&lt;2; //1 =&gt; 00000001 =&gt; 00000100 本质 1 * 2 * 2 = 4</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> &gt;&gt; <span class="number">2</span>); <span class="comment">//0</span></span><br><span class="line">       System.out.println(<span class="number">1</span> &lt;&lt; <span class="number">2</span>); <span class="comment">//4</span></span><br><span class="line">       System.out.println(<span class="number">4</span> &lt;&lt; <span class="number">3</span>); <span class="comment">//4*2*2*2=32</span></span><br><span class="line">       System.out.println(<span class="number">15</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// 15/2/2=3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/29/hello-world/"/>
      <url>/2021/07/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java架构Study</title>
      <link href="/2021/07/26/study01/"/>
      <url>/2021/07/26/study01/</url>
      
        <content type="html"><![CDATA[<h1 id="Java架构Study-01"><a href="#Java架构Study-01" class="headerlink" title="Java架构Study-01"></a>Java架构Study-01</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="事务传播-Propagation"><a href="#事务传播-Propagation" class="headerlink" title="事务传播 - Propagation"></a>事务传播 - Propagation</h2><blockquote><p>REQUIRED: 使用当前的事务，如果当前没有事务，则自己新建一个事务，子方法是必须运行在一个事务中的；</p><p>​          如果当前存在事务，则加入这个事务，成为一个整体。</p><p>​          举例：领导没饭吃，我有钱，我会自己买了自己吃；领导有的吃，会分给你一起吃。</p><p>SUPPORTS: 如果当前有事务，则使用事务；如果当前没有事务，则不使用事务。</p><p>​         举例：领导没饭吃，我也没饭吃；领导有饭吃，我也有饭吃。</p><p>MANDATORY: 该传播属性强制必须存在一个事务，如果不存在，则抛出异常。</p><p>​          举例：领导必须管饭，不管饭没饭吃，我就不乐意了，就不干了（抛出异常）。</p><p>REQUIRES_NEW: 如果当前有事务，则挂起该事务，并且自己创建一个新的事务给自己使用；</p><p>​             如果当前没有事务，则同 REQUIRED。</p><p>​             举例：领导有饭吃，我偏不要，我自己买了自己吃。</p><p>NOT_SUPPORTED: 如果当前有事务，则把事务挂起，自己不适用事务去运行数据库操作。</p><p>​              举例：领导有饭吃，分一点给你，我太忙了，放一边，我不吃。</p><p>NEVER: 如果当前有事务存在，则抛出异常。</p><p>​      举例：领导有饭给你吃，我不想吃，我热爱工作，我抛出异常。</p><p>NESTED: 如果当前有事务，则开启子事务（嵌套事务），嵌套事务是独立提交或者回滚；</p><p>​       如果当前没有事务，则同 REQUIRED。</p><p>​       但是如果主事务提交，则会携带子事务一起提交。</p><p>​       如果主事务回滚，则子事务会一起回滚。相反，子事务异常，则父事务可以回滚或不回滚。</p><p>​       举例：领导决策不对，老板怪罪，领导带着小弟一同受罪。小弟出了差错，领导可以推卸责任。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Shiro权限基本使用</title>
      <link href="/2021/07/13/shiro/"/>
      <url>/2021/07/13/shiro/</url>
      
        <content type="html"><![CDATA[<h1 id="shiro权限基本使用"><a href="#shiro权限基本使用" class="headerlink" title="shiro权限基本使用"></a>shiro权限基本使用</h1><h2 id="什么是shiro"><a href="#什么是shiro" class="headerlink" title="什么是shiro"></a>什么是shiro</h2><blockquote><p><strong>Apache Shiro™</strong> is a powerful and easy-to-use Java security framework that performs authentication, authorization, cryptography, and session management. With Shiro’s easy-to-understand API, you can quickly and easily secure any application – from the smallest mobile applications to the largest web and enterprise applications.</p><p><code>Shiro</code>是一个功能强大且易于使用的Java安全框架，它执行身份验证、授权、加密和会话管理。使用Shiro易于理解的API，您可以快速轻松地保护任何应用程序—从最小的移动应用程序到最大的web和企业应用程序。</p></blockquote><h2 id="shiro核心架构"><a href="#shiro核心架构" class="headerlink" title="shiro核心架构"></a>shiro核心架构</h2><p><a href="https://shiro.apache.org/">shiro参考文档</a></p><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20210722214631.png" alt="Detailed Architecture"></p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><blockquote><p><code>Subject</code>即主体，外部应用于Subject进行交互，subject记录了当前的操作用户，将用户的概念理解为当前操作的主体。外部程序通过subject进行授权认证，而subject是通过SecurityManger安全管理器进行授权认证。</p></blockquote><h3 id="SecurityManger"><a href="#SecurityManger" class="headerlink" title="SecurityManger"></a>SecurityManger</h3><blockquote><p><code>SecurityManager</code>即安全管理器，对全部的subject进行安全管理，它是shiro的核心，负责对所有的subject进行安全管理。通过SecurityManager可以完成subject的认证、授权等，实质上SecurityManager是通过Authenticator进行认证，通过Authorizer进行授权，通过SessionManager进行会话管理等。</p><p><strong><code>SecurityManager</code>是一个接口，继承了Authenticator, Authorizer, SessionManager这三个接口。</strong></p></blockquote><h3 id="Authenticator"><a href="#Authenticator" class="headerlink" title="Authenticator"></a>Authenticator</h3><blockquote><p><code>Authenticator</code>即认证器，对用户身份进行认证，Authenticator是一个接口，shiro提供ModularRealmAuthenticator实现类，通过ModularRealmAuthenticator基本可以满足大多数需求，也可以自定义认证器。</p></blockquote><h3 id="Authorizer"><a href="#Authorizer" class="headerlink" title="Authorizer"></a>Authorizer</h3><blockquote><p><code>Authorizer</code>即授权器，用户通过认证器认证通过，在访问功能时需要通过授权器判断用户是否有此功能的操作权限。</p></blockquote><h3 id="Realm"><a href="#Realm" class="headerlink" title="Realm"></a>Realm</h3><blockquote><p><code>Realm</code>即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息。</p><p><strong>不要把realm理解成只是从数据源取数据，在realm中还有认证授权校验的相关的代码</strong></p></blockquote><h3 id="SessionManager"><a href="#SessionManager" class="headerlink" title="SessionManager"></a>SessionManager</h3><blockquote><p><code>sessionManager</code>即会话管理，shiro框架定义了一套会话管理，它不依赖web容器的session，所以shiro可以使用在非web应用上，也可以将分布式应用的会话集中在一点管理，此特性可使它实现单点登录。</p></blockquote><h3 id="SessionDAO"><a href="#SessionDAO" class="headerlink" title="SessionDAO"></a>SessionDAO</h3><blockquote><p><code>SessionDAO</code>即会话dao，是对session会话操作的一套接口，比如要将session存储到数据库，可以通过jdbc将会话存储到数据库。</p></blockquote><h3 id="CacheManager"><a href="#CacheManager" class="headerlink" title="CacheManager"></a>CacheManager</h3><blockquote><p><code>CacheManager</code>即缓存管理，将用户权限数据存储在缓存，这样可以提高性能。</p></blockquote><h3 id="Cryptography"><a href="#Cryptography" class="headerlink" title="Cryptography"></a>Cryptography</h3><blockquote><p><code>Cryptography</code>即密码管理，shiro提供了一套加密/解密的组件，方便开发。比如提供常用的散列、加/解密等功能。</p></blockquote><h2 id="Shiro中的认证"><a href="#Shiro中的认证" class="headerlink" title="Shiro中的认证"></a>Shiro中的认证</h2><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><blockquote><p>身份认证，就是判断一个用户是否为合法用户的处理过程。最常用的简单身份认证方式是系统通过核对用户输入的用户名和口令，看其是否与系统中存储的该用户的用户名和口令一致，来判断用户身份是否正确。</p></blockquote><h3 id="shiro中认证的关键对象"><a href="#shiro中认证的关键对象" class="headerlink" title="shiro中认证的关键对象"></a>shiro中认证的关键对象</h3><ul><li><p><code>Subject:主体</code></p><blockquote><p>访问系统的用户，主体可以是用户、程序等，进行认证的都称为主体。</p></blockquote></li><li><p><code>Principal:身份信息</code></p><blockquote><p>是主体（subject）进行身份认证的标识，标识必须具有<code>唯一性</code>，如用户名、手机号、邮箱地址等，一个主体可以有多个身份，但是必须有一个主身份（Primary Principal）。</p></blockquote></li><li><p><code>Credential:凭证信息</code></p><blockquote><p>凭证信息，是只有主体自己知道的安全信息，如密码、证书等。</p></blockquote></li></ul><h3 id="认证实现"><a href="#认证实现" class="headerlink" title="认证实现"></a>认证实现</h3><h4 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h4><hr><p><img src="https://gitee.com/bixbycell/article-images/raw/master/article/20210722214651.png"></p><blockquote><p>如上图，我们通过Shiro架构图的认证部分，来说明Shiro认证内部的处理顺序：<br>1、应用程序构建了一个终端用户认证信息的AuthenticationToken 实例后，调用Subject.login方法。<br>2、Sbuject的实例通常是DelegatingSubject类（或子类）的实例对象，在认证开始时，会委托应用程序设置的securityManager实例调用securityManager.login(token)方法。<br>3、SecurityManager接受到token(令牌)信息后会委托内置的Authenticator的实例（通常都是ModularRealmAuthenticator类的实例）调用authenticator.authenticate(token). ModularRealmAuthenticator在认证过程中会对设置的一个或多个Realm实例进行适配，它实际上为Shiro提供了一个可拔插的认证机制。<br>4、如果在应用程序中配置了多个Realm，ModularRealmAuthenticator会根据配置的AuthenticationStrategy(认证策略)来进行多Realm的认证过程。在Realm被调用后，AuthenticationStrategy将对每一个Realm的结果作出响应。<br>注：如果应用程序中仅配置了一个Realm，Realm将被直接调用而无需再配置认证策略。<br>5、判断每一个Realm是否支持提交的token，如果支持，Realm将调用getAuthenticationInfo(token); getAuthenticationInfo 方法就是实际认证处理，我们通过覆盖Realm的doGetAuthenticationInfo方法来编写我们自定义的认证处理。</p></blockquote><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><ul><li>maven依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建.ini配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 约定写法</span><br><span class="line">[users]</span><br><span class="line"># 用户名=密码</span><br><span class="line">bixby=123</span><br><span class="line">zzy=123456</span><br></pre></td></tr></table></figure><blockquote><p>.ini文件主要用来学习shiro时书写需要的权限数据，从而免去配置数据库数据的步骤。</p></blockquote><ul><li>测试代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建安全管理器对象</span></span><br><span class="line">        DefaultSecurityManager securityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//给安全管理器设置realm</span></span><br><span class="line">        securityManager.setRealm(<span class="keyword">new</span> IniRealm(<span class="string">&quot;classpath:shiro.ini&quot;</span>));</span><br><span class="line">        <span class="comment">//给全局安全工具类SecurityUtils设置安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">        <span class="comment">//拿到当前的subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建令牌</span></span><br><span class="line">        AuthenticationToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;bixby&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户认证</span></span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功，欢迎您：&quot;</span> + token.getPrincipal());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，用户不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，密码不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码追踪"><a href="#源码追踪" class="headerlink" title="源码追踪"></a>源码追踪</h3><blockquote><p>从<code>subject.login(token)</code>入口开始debug,最终可以得到用户的认证是在<code>SimpleAccountRealm</code>的<code>doGetAuthenticationInfo</code>的方法中完成，而<code>SimpleAccountRealm</code>继承自<code>AuthorizingRealm</code>，而<code>AuthorizingRealm</code>中有一个抽象方法</p><p><strong>protected abstract AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection var1);</strong></p><p><code>SimpleAccountRealm</code>就是复写了<code>AuthorizingRealm</code>中的这个抽象方法实现的用户认证，所以后面我们需要自定义认证的时候我们就可以自定义一个realm继承自<code>AuthorizingRealm</code>来复写<code>doGetAuthorizationInfo</code>，在这个方法里面实现我们自己的认证逻辑</p><p>不仅认证，有意思的是<code>AuthorizingRealm</code>是继承自<code>AuthenticatingRealm</code>，而<code>AuthenticatingRealm</code>中有个抽象方法</p><p><strong>protected abstract AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken var1) throws AuthenticationException;</strong></p><p>这个方法是实现用户授权的方法,也就是说通过我们自定义realm继承<code>AuthorizingRealm</code>就可以同时复写认证和授权两个方法</p></blockquote><h2 id="shiro自定义Relam实现认证"><a href="#shiro自定义Relam实现认证" class="headerlink" title="shiro自定义Relam实现认证"></a>shiro自定义Relam实现认证</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Bixby</span></span><br><span class="line"><span class="comment"> * 使用自定义relam</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealmAuthenticator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建安全管理器对象</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">//给安全管理器设置realm</span></span><br><span class="line">        defaultSecurityManager.setRealm(<span class="keyword">new</span> CustomerRealm());</span><br><span class="line">        <span class="comment">//给全局安全工具类SecurityUtils设置安全管理器</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">//拿到当前的subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//创建令牌</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;bixby&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户认证</span></span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功，欢迎您：&quot;</span> + token.getPrincipal());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，用户不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，密码不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Bixby</span></span><br><span class="line"><span class="comment"> * 自定义realm实现，将认证/授权数据的来源转为数据库的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//在token中获取用户名</span></span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        System.out.println(principal);</span><br><span class="line">        <span class="comment">//根据用户信息查询数据库中的相关数据</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bixby&quot;</span>.equals(principal))&#123;</span><br><span class="line">            <span class="comment">//参数: 用户名，密码，当前realm的名字</span></span><br><span class="line">            SimpleAuthenticationInfo simpleAuthenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;bixby&quot;</span>,<span class="string">&quot;123&quot;</span>,<span class="keyword">this</span>.getName());</span><br><span class="line">            <span class="keyword">return</span> simpleAuthenticationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro的加密和随机盐"><a href="#Shiro的加密和随机盐" class="headerlink" title="Shiro的加密和随机盐"></a>Shiro的加密和随机盐</h2><h3 id="Shiro中密码的加密策略"><a href="#Shiro中密码的加密策略" class="headerlink" title="Shiro中密码的加密策略"></a>Shiro中密码的加密策略</h3><blockquote><p>实际应用中用户的密码并不是明文存储在数据库中的，而是采用一种加密算法将密码加密后存储在数据库中。Shiro中提供了一整套的加密算法，并且提供了随机盐。shiro使用指定的加密算法将用户密码和随机盐进行加密，并按照指定的散列次数将散列后的密码存储在数据库中。由于随机盐每个用户可以不同，这就极大的提高了密码的安全性。</p></blockquote><h3 id="Shiro中的加密方式"><a href="#Shiro中的加密方式" class="headerlink" title="Shiro中的加密方式"></a>Shiro中的加密方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroMD5Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Md5Hash md5Hash01 = <span class="keyword">new</span> Md5Hash(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        System.out.println(md5Hash01.toHex());</span><br><span class="line">        </span><br><span class="line">        Md5Hash md5Hash02 = <span class="keyword">new</span> Md5Hash(<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;bixby&quot;</span>);</span><br><span class="line">        System.out.println(md5Hash02.toHex());</span><br><span class="line"></span><br><span class="line">        Md5Hash md5Hash03 = <span class="keyword">new</span> Md5Hash(<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;bixby&quot;</span>,<span class="number">1024</span>);</span><br><span class="line">        System.out.println(md5Hash03.toHex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Shiro中自定义加密Realm"><a href="#Shiro中自定义加密Realm" class="headerlink" title="Shiro中自定义加密Realm"></a>Shiro中自定义加密Realm</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMD5AuthenticatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建SecurityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">// 设置自定义realm</span></span><br><span class="line">        CustomerMD5Realm realm = <span class="keyword">new</span> CustomerMD5Realm();</span><br><span class="line">        <span class="comment">// 为realm设置凭证匹配器</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">// 设置加密算法</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置hash次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line">        <span class="comment">// 设置安全工具类</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">// 通过安全工具类获取subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 创建token</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;bixby&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户认证</span></span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功，欢迎您：&quot;</span> + token.getPrincipal());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，用户不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，密码不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMD5Realm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bixby&quot;</span>.equals(principal))&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 用户名</span></span><br><span class="line"><span class="comment">             * 加密后的密码</span></span><br><span class="line"><span class="comment">             * 随机盐</span></span><br><span class="line"><span class="comment">             * 当前realm的名称</span></span><br><span class="line"><span class="comment">             * 4b0265506f38a38498893cfa5ab1b7ac是密码和盐加密后的结果</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,</span><br><span class="line">                    <span class="string">&quot;4b0265506f38a38498893cfa5ab1b7ac&quot;</span>,</span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">&quot;bixby&quot;</span>),</span><br><span class="line">                    <span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Shiro中的授权"><a href="#Shiro中的授权" class="headerlink" title="Shiro中的授权"></a>Shiro中的授权</h2><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><blockquote><p>授权，即访问控制，控制谁能访问那些资源。主体进行身份认证后需要分配权限方可访问系统的资源，对于某些资源没有权限是无法访问的。</p><p>授权可以理解为Who对What(Which)进行How操作：</p><p><code>Who，即主体（Subject）</code>，主体需要访问系统中的资源。</p><p><code>What，即资源（Resource)</code>，如系统菜单、页面、按钮、类方法、系统商品信息等。资源包括<code>资源类型</code>和<code>资源实例</code>，比如<code>商品信息为资源类型</code>，类型为t01的商品为<code>资源实例</code>，编号为001的商品信息也属于<code>资源实例</code>。</p><p><code>How，权限/许可（Permission)</code>，规定了主体对资源的操作许可，权限离开资源没有意义，如用户查询权限、用户添加权限、某个类方法的调用权限、编号为001用户的修改权限等，通过权限可知主体对哪些资源都有哪些操作许可。</p></blockquote><h3 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h3><ul><li><h3 id="基于角色的访问控制"><a href="#基于角色的访问控制" class="headerlink" title="基于角色的访问控制"></a>基于角色的访问控制</h3></li></ul><blockquote><p>RBAC基于角色的访问控制（Role-Based Access Control）是以角色为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">  <span class="comment">//操作什么资源</span></span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><ul><li><h3 id="基于资源的访问控制"><a href="#基于资源的访问控制" class="headerlink" title="基于资源的访问控制"></a>基于资源的访问控制</h3></li></ul><blockquote><p>RBAC基于资源的访问控制（Resource-Based Access Control）是以资源为中心进行访问控制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:update:01&quot;</span>))&#123; <span class="comment">//资源实例</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(subject.isPermission(<span class="string">&quot;user:update:*&quot;</span>))&#123;  <span class="comment">//资源类型</span></span><br><span class="line">  <span class="comment">//对01用户进行修改</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="权限字符串"><a href="#权限字符串" class="headerlink" title="权限字符串"></a>权限字符串</h3><blockquote><p>权限字符串的规则是：<strong>资源标识符：操作：资源实例标识符</strong>，意思是对哪个资源的哪个实例具有什么操作，“:”是资源/操作/实例的分割符，权限字符串也可以使用*通配符。</p><p>例子：</p><ul><li>用户创建权限：user:create，或user:create:*</li><li>用户修改实例001的权限：user:update:001</li><li>用户实例001的所有权限：user:*：001</li></ul></blockquote><h3 id="权限的编码方式"><a href="#权限的编码方式" class="headerlink" title="权限的编码方式"></a>权限的编码方式</h3><ul><li><h3 id="编程式"><a href="#编程式" class="headerlink" title="编程式"></a>编程式</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//无权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="注解式"><a href="#注解式" class="headerlink" title="注解式"></a>注解式</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles(&quot;admin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//有权限</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="标签式"><a href="#标签式" class="headerlink" title="标签式"></a>标签式</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JSP/GSP 标签：在JSP/GSP 页面通过相应的标签完成：</span><br><span class="line">&lt;shiro:hasRole name=&quot;admin&quot;&gt;</span><br><span class="line">&lt;!— 有权限—&gt;</span><br><span class="line">&lt;/shiro:hasRole&gt;</span><br><span class="line">注意: Thymeleaf 中使用shiro需要额外集成!</span><br></pre></td></tr></table></figure><h3 id="授权的实现"><a href="#授权的实现" class="headerlink" title="授权的实现"></a>授权的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMD5AuthenticatorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建SecurityManager</span></span><br><span class="line">        DefaultSecurityManager defaultSecurityManager = <span class="keyword">new</span> DefaultSecurityManager();</span><br><span class="line">        <span class="comment">// 设置自定义realm</span></span><br><span class="line">        CustomerMD5Realm realm = <span class="keyword">new</span> CustomerMD5Realm();</span><br><span class="line">        <span class="comment">// 为realm设置凭证匹配器</span></span><br><span class="line">        HashedCredentialsMatcher credentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        <span class="comment">// 设置加密算法</span></span><br><span class="line">        credentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置hash次数</span></span><br><span class="line">        credentialsMatcher.setHashIterations(<span class="number">1024</span>);</span><br><span class="line">        realm.setCredentialsMatcher(credentialsMatcher);</span><br><span class="line">        defaultSecurityManager.setRealm(realm);</span><br><span class="line">        <span class="comment">// 设置安全工具类</span></span><br><span class="line">        SecurityUtils.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">// 通过安全工具类获取subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 创建token</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">&quot;bixby&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//用户认证</span></span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            subject.login(token);</span><br><span class="line">            System.out.println(<span class="string">&quot;认证状态：&quot;</span> + subject.isAuthenticated());</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功，欢迎您：&quot;</span> + token.getPrincipal());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，用户不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;认证失败，密码不正确&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//授权</span></span><br><span class="line">        <span class="keyword">if</span> (subject.isAuthenticated())&#123;</span><br><span class="line">            <span class="comment">//基于角色权限控制</span></span><br><span class="line">            System.out.println(subject.hasRole(<span class="string">&quot;super&quot;</span>));</span><br><span class="line">            <span class="comment">//基于多角色权限控制(同时具有)</span></span><br><span class="line">            subject.hasAllRoles(Arrays.asList(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;super&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//是否具有其中一个角色</span></span><br><span class="line">            <span class="keyword">boolean</span>[] booleans = subject.hasRoles(Arrays.asList(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;super&quot;</span>,<span class="string">&quot;user&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">boolean</span> boolean01:booleans)&#123;</span><br><span class="line">                System.out.println(boolean01);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//基于权限字符串的访问控制  资源标识符:操作:资源类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;权限:&quot;</span>+subject.isPermitted(<span class="string">&quot;user:update:01&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;权限:&quot;</span>+subject.isPermitted(<span class="string">&quot;product:create:02&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分别具有那些权限</span></span><br><span class="line">            <span class="keyword">boolean</span>[] permitted = subject.isPermitted(<span class="string">&quot;user:*:01&quot;</span>, <span class="string">&quot;order:*:10&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">boolean</span> b : permitted) &#123;</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//同时具有哪些权限</span></span><br><span class="line">            <span class="keyword">boolean</span> permittedAll = subject.isPermittedAll(<span class="string">&quot;user:*:01&quot;</span>, <span class="string">&quot;product:create:01&quot;</span>);</span><br><span class="line">            System.out.println(permittedAll);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerMD5Realm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从系统返回的身份信息集合中获取主身份信息（用户名）</span></span><br><span class="line">        String primaryPrincipal = (String) principalCollection.getPrimaryPrincipal();</span><br><span class="line">        System.out.println(<span class="string">&quot;用户名: &quot;</span>+primaryPrincipal);</span><br><span class="line">        <span class="comment">//根据用户名获取当前用户的角色信息,以及权限信息</span></span><br><span class="line">        SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据库中查询角色信息赋值给权限对象</span></span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addRole(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将数据库中查询权限信息赋值个权限对象</span></span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;user:*:01&quot;</span>);</span><br><span class="line">        simpleAuthorizationInfo.addStringPermission(<span class="string">&quot;product:create&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> simpleAuthorizationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String principal = (String) authenticationToken.getPrincipal();</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;bixby&quot;</span>.equals(principal))&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 用户名</span></span><br><span class="line"><span class="comment">             * 加密后的密码</span></span><br><span class="line"><span class="comment">             * 随机盐</span></span><br><span class="line"><span class="comment">             * 当前realm的名称</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(principal,</span><br><span class="line">                    <span class="string">&quot;4b0265506f38a38498893cfa5ab1b7ac&quot;</span>,</span><br><span class="line">                    ByteSource.Util.bytes(<span class="string">&quot;bixby&quot;</span>),</span><br><span class="line">                    <span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
